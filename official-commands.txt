*482
$6
module
*10
$7
summary
$32
A container for module commands.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*10
$13
module|loadex
*10
$7
summary
$41
Loads a module using extended parameters.
$5
since
$5
7.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$9
arguments
*3
*6
$4
name
$4
path
$4
type
$6
string
$12
display_text
$4
path
*10
$4
name
$7
configs
$4
type
$5
block
$5
token
$6
CONFIG
$5
flags
*3
+optional
+multiple
+multiple_token
$9
arguments
*2
*6
$4
name
$4
name
$4
type
$6
string
$12
display_text
$4
name
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
*10
$4
name
$4
args
$4
type
$6
string
$12
display_text
$4
args
$5
token
$4
ARGS
$5
flags
*2
+optional
+multiple
$11
module|load
*10
$7
summary
$15
Loads a module.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$9
arguments
*2
*6
$4
name
$4
path
$4
type
$6
string
$12
display_text
$4
path
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$11
module|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
5.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$11
module|list
*8
$7
summary
$27
Returns all loaded modules.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$45
O(N) where N is the number of loaded modules.
$13
module|unload
*10
$7
summary
$17
Unloads a module.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$4
name
$4
type
$6
string
$12
display_text
$4
name
$4
decr
*10
$7
summary
$95
Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
zrank
*12
$7
summary
$74
Returns the index of a member in a sorted set ordered by ascending scores.
$5
since
$5
2.0.0
$5
group
$10
sorted-set
$10
complexity
$9
O(log(N))
$7
history
*1
*2
$5
7.2.0
$40
Added the optional `WITHSCORE` argument.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
*10
$4
name
$9
withscore
$4
type
$10
pure-token
$12
display_text
$9
withscore
$5
token
$9
WITHSCORE
$5
flags
*1
+optional
$4
hset
*12
$7
summary
$51
Creates or modifies the value of a field in a hash.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$132
O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.
$7
history
*1
*2
$5
4.0.0
$47
Accepts multiple `field` and `value` arguments.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$4
data
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*2
*6
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$16
zrevrangebyscore
*18
$7
summary
$74
Returns members in a sorted set within a range of scores in reverse order.
$5
since
$5
2.2.0
$5
group
$10
sorted-set
$10
complexity
$217
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$47
`ZRANGE` with the `REV` and `BYSCORE` arguments
$7
history
*1
*2
$5
2.1.6
$33
`min` and `max` can be exclusive.
$9
arguments
*5
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
max
$4
type
$6
double
$12
display_text
$3
max
*6
$4
name
$3
min
$4
type
$6
double
$12
display_text
$3
min
*10
$4
name
$10
withscores
$4
type
$10
pure-token
$12
display_text
$10
withscores
$5
token
$10
WITHSCORES
$5
flags
*1
+optional
*10
$4
name
$5
limit
$4
type
$5
block
$5
token
$5
LIMIT
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$11
sinterstore
*10
$7
summary
$47
Stores the intersect of multiple sets in a key.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$93
O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.
$9
arguments
*2
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:0
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
flags
*1
+multiple
$5
brpop
*12
$7
summary
$144
Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.
$5
since
$5
2.0.0
$5
group
$4
list
$10
complexity
$44
O(N) where N is the number of provided keys.
$7
history
*1
*2
$5
6.0.0
$59
`timeout` is interpreted as a double instead of an integer.
$9
arguments
*2
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*6
$4
name
$7
timeout
$4
type
$6
double
$12
display_text
$7
timeout
$7
unwatch
*8
$7
summary
$44
Forgets about watched keys of a transaction.
$5
since
$5
2.2.0
$5
group
$12
transactions
$10
complexity
$4
O(1)
$4
lset
*10
$7
summary
$52
Sets the value of an element in a list by its index.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$105
O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
index
$4
type
$7
integer
$12
display_text
$5
index
*6
$4
name
$7
element
$4
type
$6
string
$12
display_text
$7
element
$7
hstrlen
*10
$7
summary
$43
Returns the length of the value of a field.
$5
since
$5
3.2.0
$5
group
$4
hash
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
$17
georadiusbymember
*18
$7
summary
$101
Queries a geospatial index for members within a distance from a member, optionally stores the result.
$5
since
$5
3.2.0
$5
group
$3
geo
$10
complexity
$168
O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$79
`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` and `FROMMEMBER` arguments
$7
history
*1
*2
$5
7.0.0
$39
Added support for uppercase unit names.
$9
arguments
*10
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
*6
$4
name
$6
radius
$4
type
$6
double
$12
display_text
$6
radius
*6
$4
name
$4
unit
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$1
m
$4
type
$10
pure-token
$12
display_text
$1
m
$5
token
$1
M
*8
$4
name
$2
km
$4
type
$10
pure-token
$12
display_text
$2
km
$5
token
$2
KM
*8
$4
name
$2
ft
$4
type
$10
pure-token
$12
display_text
$2
ft
$5
token
$2
FT
*8
$4
name
$2
mi
$4
type
$10
pure-token
$12
display_text
$2
mi
$5
token
$2
MI
*10
$4
name
$9
withcoord
$4
type
$10
pure-token
$12
display_text
$9
withcoord
$5
token
$9
WITHCOORD
$5
flags
*1
+optional
*10
$4
name
$8
withdist
$4
type
$10
pure-token
$12
display_text
$8
withdist
$5
token
$8
WITHDIST
$5
flags
*1
+optional
*10
$4
name
$8
withhash
$4
type
$10
pure-token
$12
display_text
$8
withhash
$5
token
$8
WITHHASH
$5
flags
*1
+optional
*8
$4
name
$11
count-block
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
*10
$4
name
$3
any
$4
type
$10
pure-token
$12
display_text
$3
any
$5
token
$3
ANY
$5
flags
*1
+optional
*8
$4
name
$5
order
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$3
asc
$4
type
$10
pure-token
$12
display_text
$3
asc
$5
token
$3
ASC
*8
$4
name
$4
desc
$4
type
$10
pure-token
$12
display_text
$4
desc
$5
token
$4
DESC
*8
$4
name
$5
store
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*10
$4
name
$8
storekey
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
token
$5
STORE
*10
$4
name
$12
storedistkey
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:2
$5
token
$9
STOREDIST
$4
copy
*10
$7
summary
$39
Copies the value of a key to a new key.
$5
since
$5
6.2.0
$5
group
$7
generic
$10
complexity
$95
O(N) worst case for collections, where N is the number of nested items. O(1) for string values.
$9
arguments
*4
*8
$4
name
$6
source
$4
type
$3
key
$12
display_text
$6
source
$14
key_spec_index
:0
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:1
*10
$4
name
$14
destination-db
$4
type
$7
integer
$12
display_text
$14
destination-db
$5
token
$2
DB
$5
flags
*1
+optional
*10
$4
name
$7
replace
$4
type
$10
pure-token
$12
display_text
$7
replace
$5
token
$7
REPLACE
$5
flags
*1
+optional
$9
zrevrange
*16
$7
summary
$75
Returns members in a sorted set within a range of indexes in reverse order.
$5
since
$5
1.2.0
$5
group
$10
sorted-set
$10
complexity
$104
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$32
`ZRANGE` with the `REV` argument
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
start
$4
type
$7
integer
$12
display_text
$5
start
*6
$4
name
$4
stop
$4
type
$7
integer
$12
display_text
$4
stop
*10
$4
name
$10
withscores
$4
type
$10
pure-token
$12
display_text
$10
withscores
$5
token
$10
WITHSCORES
$5
flags
*1
+optional
$8
function
*10
$7
summary
$34
A container for function commands.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*18
$15
function|delete
*10
$7
summary
$36
Deletes a library and its functions.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$12
library-name
$4
type
$6
string
$12
display_text
$12
library-name
$13
function|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$4
O(1)
$13
function|kill
*8
$7
summary
$39
Terminates a function during execution.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$4
O(1)
$13
function|load
*10
$7
summary
$18
Creates a library.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$48
O(1) (considering compilation time is redundant)
$9
arguments
*2
*10
$4
name
$7
replace
$4
type
$10
pure-token
$12
display_text
$7
replace
$5
token
$7
REPLACE
$5
flags
*1
+optional
*6
$4
name
$13
function-code
$4
type
$6
string
$12
display_text
$13
function-code
$13
function|dump
*8
$7
summary
$53
Dumps all libraries into a serialized binary payload.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$39
O(N) where N is the number of functions
$13
function|list
*10
$7
summary
$40
Returns information about all libraries.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$39
O(N) where N is the number of functions
$9
arguments
*2
*10
$4
name
$20
library-name-pattern
$4
type
$6
string
$12
display_text
$20
library-name-pattern
$5
token
$11
LIBRARYNAME
$5
flags
*1
+optional
*10
$4
name
$8
withcode
$4
type
$10
pure-token
$12
display_text
$8
withcode
$5
token
$8
WITHCODE
$5
flags
*1
+optional
$16
function|restore
*10
$7
summary
$38
Restores all libraries from a payload.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$54
O(N) where N is the number of functions on the payload
$9
arguments
*2
*6
$4
name
$16
serialized-value
$4
type
$6
string
$12
display_text
$16
serialized-value
*8
$4
name
$6
policy
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*3
*8
$4
name
$5
flush
$4
type
$10
pure-token
$12
display_text
$5
flush
$5
token
$5
FLUSH
*8
$4
name
$6
append
$4
type
$10
pure-token
$12
display_text
$6
append
$5
token
$6
APPEND
*8
$4
name
$7
replace
$4
type
$10
pure-token
$12
display_text
$7
replace
$5
token
$7
REPLACE
$14
function|flush
*10
$7
summary
$36
Deletes all libraries and functions.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$47
O(N) where N is the number of functions deleted
$9
arguments
*1
*8
$4
name
$10
flush-type
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
async
$4
type
$10
pure-token
$12
display_text
$5
async
$5
token
$5
ASYNC
*8
$4
name
$4
sync
$4
type
$10
pure-token
$12
display_text
$4
sync
$5
token
$4
SYNC
$14
function|stats
*8
$7
summary
$54
Returns information about a function during execution.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$4
O(1)
$6
script
*10
$7
summary
$48
A container for Lua scripts management commands.
$5
since
$5
2.6.0
$5
group
$9
scripting
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*12
$13
script|exists
*10
$7
summary
$69
Determines whether server-side Lua scripts exist in the script cache.
$5
since
$5
2.6.0
$5
group
$9
scripting
$10
complexity
$100
O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).
$9
arguments
*1
*8
$4
name
$4
sha1
$4
type
$6
string
$12
display_text
$4
sha1
$5
flags
*1
+multiple
$12
script|debug
*10
$7
summary
$47
Sets the debug mode of server-side Lua scripts.
$5
since
$5
3.2.0
$5
group
$9
scripting
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$4
mode
$4
type
$5
oneof
$9
arguments
*3
*8
$4
name
$3
yes
$4
type
$10
pure-token
$12
display_text
$3
yes
$5
token
$3
YES
*8
$4
name
$4
sync
$4
type
$10
pure-token
$12
display_text
$4
sync
$5
token
$4
SYNC
*8
$4
name
$2
no
$4
type
$10
pure-token
$12
display_text
$2
no
$5
token
$2
NO
$12
script|flush
*12
$7
summary
$58
Removes all server-side Lua scripts from the script cache.
$5
since
$5
2.6.0
$5
group
$9
scripting
$10
complexity
$48
O(N) with N being the number of scripts in cache
$7
history
*1
*2
$5
6.2.0
$53
Added the `ASYNC` and `SYNC` flushing mode modifiers.
$9
arguments
*1
*10
$4
name
$10
flush-type
$4
type
$5
oneof
$5
since
$5
6.2.0
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
async
$4
type
$10
pure-token
$12
display_text
$5
async
$5
token
$5
ASYNC
*8
$4
name
$4
sync
$4
type
$10
pure-token
$12
display_text
$4
sync
$5
token
$4
SYNC
$11
script|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
5.0.0
$5
group
$9
scripting
$10
complexity
$4
O(1)
$11
script|kill
*8
$7
summary
$53
Terminates a server-side Lua script during execution.
$5
since
$5
2.6.0
$5
group
$9
scripting
$10
complexity
$4
O(1)
$11
script|load
*10
$7
summary
$51
Loads a server-side Lua script to the script cache.
$5
since
$5
2.6.0
$5
group
$9
scripting
$10
complexity
$57
O(N) with N being the length in bytes of the script body.
$9
arguments
*1
*6
$4
name
$6
script
$4
type
$6
string
$12
display_text
$6
script
$5
psync
*8
$7
summary
$40
An internal command used in replication.
$5
since
$5
2.8.0
$5
group
$6
server
$9
arguments
*2
*6
$4
name
$13
replicationid
$4
type
$6
string
$12
display_text
$13
replicationid
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
$8
flushall
*12
$7
summary
$36
Removes all keys from all databases.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$57
O(N) where N is the total number of keys in all databases
$7
history
*2
*2
$5
4.0.0
$41
Added the `ASYNC` flushing mode modifier.
*2
$5
6.2.0
$40
Added the `SYNC` flushing mode modifier.
$9
arguments
*1
*8
$4
name
$10
flush-type
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*10
$4
name
$5
async
$4
type
$10
pure-token
$12
display_text
$5
async
$5
token
$5
ASYNC
$5
since
$5
4.0.0
*10
$4
name
$4
sync
$4
type
$10
pure-token
$12
display_text
$4
sync
$5
token
$4
SYNC
$5
since
$5
6.2.0
$4
sync
*6
$7
summary
$40
An internal command used in replication.
$5
since
$5
1.0.0
$5
group
$6
server
$4
hget
*10
$7
summary
$39
Returns the value of a field in a hash.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
$11
srandmember
*12
$7
summary
$45
Get one or multiple random members from a set
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$98
Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.
$7
history
*1
*2
$5
2.6.0
$36
Added the optional `count` argument.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
since
$5
2.6.0
$5
flags
*1
+optional
$6
unlink
*10
$7
summary
$40
Asynchronously deletes one or more keys.
$5
since
$5
4.0.0
$5
group
$7
generic
$10
complexity
$207
O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$5
getex
*10
$7
summary
$68
Returns the string value of a key after setting its expiration time.
$5
since
$5
6.2.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$10
expiration
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*5
*8
$4
name
$7
seconds
$4
type
$7
integer
$12
display_text
$7
seconds
$5
token
$2
EX
*8
$4
name
$12
milliseconds
$4
type
$7
integer
$12
display_text
$12
milliseconds
$5
token
$2
PX
*8
$4
name
$17
unix-time-seconds
$4
type
$9
unix-time
$12
display_text
$17
unix-time-seconds
$5
token
$4
EXAT
*8
$4
name
$22
unix-time-milliseconds
$4
type
$9
unix-time
$12
display_text
$22
unix-time-milliseconds
$5
token
$4
PXAT
*8
$4
name
$7
persist
$4
type
$10
pure-token
$12
display_text
$7
persist
$5
token
$7
PERSIST
$6
lindex
*10
$7
summary
$44
Returns an element from a list by its index.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$152
O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
index
$4
type
$7
integer
$12
display_text
$5
index
$6
lolwut
*8
$7
summary
$43
Displays computer art and the Redis version
$5
since
$5
5.0.0
$5
group
$6
server
$9
arguments
*1
*10
$4
name
$7
version
$4
type
$7
integer
$12
display_text
$7
version
$5
token
$7
VERSION
$5
flags
*1
+optional
$4
move
*10
$7
summary
$32
Moves a key to another database.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$2
db
$4
type
$7
integer
$12
display_text
$2
db
$8
bitfield
*10
$7
summary
$58
Performs arbitrary bitfield integer operations on strings.
$5
since
$5
3.2.0
$5
group
$6
bitmap
$10
complexity
$34
O(1) for each subcommand specified
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$9
operation
$4
type
$5
oneof
$5
flags
*2
+optional
+multiple
$9
arguments
*2
*8
$4
name
$9
get-block
$4
type
$5
block
$5
token
$3
GET
$9
arguments
*2
*6
$4
name
$8
encoding
$4
type
$6
string
$12
display_text
$8
encoding
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
write
$4
type
$5
block
$9
arguments
*2
*10
$4
name
$14
overflow-block
$4
type
$5
oneof
$5
token
$8
OVERFLOW
$5
flags
*1
+optional
$9
arguments
*3
*8
$4
name
$4
wrap
$4
type
$10
pure-token
$12
display_text
$4
wrap
$5
token
$4
WRAP
*8
$4
name
$3
sat
$4
type
$10
pure-token
$12
display_text
$3
sat
$5
token
$3
SAT
*8
$4
name
$4
fail
$4
type
$10
pure-token
$12
display_text
$4
fail
$5
token
$4
FAIL
*6
$4
name
$15
write-operation
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$9
set-block
$4
type
$5
block
$5
token
$3
SET
$9
arguments
*3
*6
$4
name
$8
encoding
$4
type
$6
string
$12
display_text
$8
encoding
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
value
$4
type
$7
integer
$12
display_text
$5
value
*8
$4
name
$12
incrby-block
$4
type
$5
block
$5
token
$6
INCRBY
$9
arguments
*3
*6
$4
name
$8
encoding
$4
type
$6
string
$12
display_text
$8
encoding
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$9
increment
$4
type
$7
integer
$12
display_text
$9
increment
$4
lrem
*10
$7
summary
$79
Removes elements from a list. Deletes the list if the last element was removed.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$81
O(N+M) where N is the length of the list and M is the number of elements removed.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
*6
$4
name
$7
element
$4
type
$6
string
$12
display_text
$7
element
$6
psetex
*16
$7
summary
$108
Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.
$5
since
$5
2.6.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$6
2.6.12
$11
replaced_by
$28
`SET` with the `PX` argument
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$12
milliseconds
$4
type
$7
integer
$12
display_text
$12
milliseconds
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$8
xpending
*12
$7
summary
$88
Returns the information and entries from a stream consumer group's pending entries list.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$364
O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.
$7
history
*1
*2
$5
6.2.0
$54
Added the `IDLE` option and exclusive range intervals.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
*8
$4
name
$7
filters
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*5
*12
$4
name
$13
min-idle-time
$4
type
$7
integer
$12
display_text
$13
min-idle-time
$5
token
$4
IDLE
$5
since
$5
6.2.0
$5
flags
*1
+optional
*6
$4
name
$5
start
$4
type
$6
string
$12
display_text
$5
start
*6
$4
name
$3
end
$4
type
$6
string
$12
display_text
$3
end
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
*8
$4
name
$8
consumer
$4
type
$6
string
$12
display_text
$8
consumer
$5
flags
*1
+optional
$9
zlexcount
*10
$7
summary
$77
Returns the number of members in a sorted set within a lexicographical range.
$5
since
$5
2.8.9
$5
group
$10
sorted-set
$10
complexity
$64
O(log(N)) with N being the number of elements in the sorted set.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
min
$4
type
$6
string
$12
display_text
$3
min
*6
$4
name
$3
max
$4
type
$6
string
$12
display_text
$3
max
$9
rpoplpush
*16
$7
summary
$130
Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.
$5
since
$5
1.2.0
$5
group
$4
list
$10
complexity
$4
O(1)
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$45
`LMOVE` with the `RIGHT` and `LEFT` arguments
$9
arguments
*2
*8
$4
name
$6
source
$4
type
$3
key
$12
display_text
$6
source
$14
key_spec_index
:0
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:1
$4
info
*12
$7
summary
$52
Returns information and statistics about the server.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.0.0
$52
Added support for taking multiple section arguments.
$9
arguments
*1
*8
$4
name
$7
section
$4
type
$6
string
$12
display_text
$7
section
$5
flags
*2
+optional
+multiple
$9
replicaof
*10
$7
summary
$70
Configures a server as replica of another, or promotes it to a master.
$5
since
$5
5.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$4
args
$4
type
$5
oneof
$9
arguments
*2
*6
$4
name
$9
host-port
$4
type
$5
block
$9
arguments
*2
*6
$4
name
$4
host
$4
type
$6
string
$12
display_text
$4
host
*6
$4
name
$4
port
$4
type
$7
integer
$12
display_text
$4
port
*6
$4
name
$6
no-one
$4
type
$5
block
$9
arguments
*2
*8
$4
name
$2
no
$4
type
$10
pure-token
$12
display_text
$2
no
$5
token
$2
NO
*8
$4
name
$3
one
$4
type
$10
pure-token
$12
display_text
$3
one
$5
token
$3
ONE
$7
evalsha
*10
$7
summary
$49
Executes a server-side Lua script by SHA1 digest.
$5
since
$5
2.6.0
$5
group
$9
scripting
$10
complexity
$39
Depends on the script that is executed.
$9
arguments
*4
*6
$4
name
$4
sha1
$4
type
$6
string
$12
display_text
$4
sha1
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*2
+optional
+multiple
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$8
fcall_ro
*10
$7
summary
$29
Invokes a read-only function.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$41
Depends on the function that is executed.
$9
arguments
*4
*6
$4
name
$8
function
$4
type
$6
string
$12
display_text
$8
function
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*2
+optional
+multiple
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$7
slaveof
*16
$7
summary
$78
Sets a Redis server as a replica of another, or promotes it to being a master.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
5.0.0
$11
replaced_by
$11
`REPLICAOF`
$9
arguments
*1
*6
$4
name
$4
args
$4
type
$5
oneof
$9
arguments
*2
*6
$4
name
$9
host-port
$4
type
$5
block
$9
arguments
*2
*6
$4
name
$4
host
$4
type
$6
string
$12
display_text
$4
host
*6
$4
name
$4
port
$4
type
$7
integer
$12
display_text
$4
port
*6
$4
name
$6
no-one
$4
type
$5
block
$9
arguments
*2
*8
$4
name
$2
no
$4
type
$10
pure-token
$12
display_text
$2
no
$5
token
$2
NO
*8
$4
name
$3
one
$4
type
$10
pure-token
$12
display_text
$3
one
$5
token
$3
ONE
$7
pfcount
*10
$7
summary
$86
Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).
$5
since
$5
2.8.9
$5
group
$11
hyperloglog
$10
complexity
$177
O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$6
msetnx
*10
$7
summary
$89
Atomically modifies the string values of one or more keys only when all keys don't exist.
$5
since
$5
1.0.1
$5
group
$6
string
$10
complexity
$42
O(N) where N is the number of keys to set.
$9
arguments
*1
*8
$4
name
$4
data
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$9
pexpireat
*12
$7
summary
$67
Sets the expiration time of a key to a Unix milliseconds timestamp.
$5
since
$5
2.6.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.0.0
$41
Added options: `NX`, `XX`, `GT` and `LT`.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$22
unix-time-milliseconds
$4
type
$9
unix-time
$12
display_text
$22
unix-time-milliseconds
*10
$4
name
$9
condition
$4
type
$5
oneof
$5
since
$5
7.0.0
$5
flags
*1
+optional
$9
arguments
*4
*8
$4
name
$2
nx
$4
type
$10
pure-token
$12
display_text
$2
nx
$5
token
$2
NX
*8
$4
name
$2
xx
$4
type
$10
pure-token
$12
display_text
$2
xx
$5
token
$2
XX
*8
$4
name
$2
gt
$4
type
$10
pure-token
$12
display_text
$2
gt
$5
token
$2
GT
*8
$4
name
$2
lt
$4
type
$10
pure-token
$12
display_text
$2
lt
$5
token
$2
LT
$4
eval
*10
$7
summary
$34
Executes a server-side Lua script.
$5
since
$5
2.6.0
$5
group
$9
scripting
$10
complexity
$39
Depends on the script that is executed.
$9
arguments
*4
*6
$4
name
$6
script
$4
type
$6
string
$12
display_text
$6
script
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*2
+optional
+multiple
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$6
bzmpop
*10
$7
summary
$168
Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
$5
since
$5
7.0.0
$5
group
$10
sorted-set
$10
complexity
$151
O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
$9
arguments
*5
*6
$4
name
$7
timeout
$4
type
$6
double
$12
display_text
$7
timeout
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*6
$4
name
$5
where
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$3
min
$4
type
$10
pure-token
$12
display_text
$3
min
$5
token
$3
MIN
*8
$4
name
$3
max
$4
type
$10
pure-token
$12
display_text
$3
max
$5
token
$3
MAX
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$6
memory
*10
$7
summary
$44
A container for memory diagnostics commands.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*12
$13
memory|doctor
*8
$7
summary
$33
Outputs a memory problems report.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$19
memory|malloc-stats
*8
$7
summary
$33
Returns the allocator statistics.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$54
Depends on how much memory is allocated, could be slow
$12
memory|purge
*8
$7
summary
$37
Asks the allocator to release memory.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$54
Depends on how much memory is allocated, could be slow
$11
memory|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$12
memory|usage
*10
$7
summary
$36
Estimates the memory usage of a key.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$38
O(N) where N is the number of samples.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$7
SAMPLES
$5
flags
*1
+optional
$12
memory|stats
*8
$7
summary
$35
Returns details about memory usage.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$4
scan
*12
$7
summary
$44
Iterates over the key names in the database.
$5
since
$5
2.8.0
$5
group
$7
generic
$10
complexity
$169
O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
$7
history
*1
*2
$5
6.0.0
$28
Added the `TYPE` subcommand.
$9
arguments
*4
*6
$4
name
$6
cursor
$4
type
$7
integer
$12
display_text
$6
cursor
*10
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$5
token
$5
MATCH
$5
flags
*1
+optional
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
*12
$4
name
$4
type
$4
type
$6
string
$12
display_text
$4
type
$5
token
$4
TYPE
$5
since
$5
6.0.0
$5
flags
*1
+optional
$6
zrange
*12
$7
summary
$58
Returns members in a sorted set within a range of indexes.
$5
since
$5
1.2.0
$5
group
$10
sorted-set
$10
complexity
$104
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
$7
history
*1
*2
$5
6.2.0
$56
Added the `REV`, `BYSCORE`, `BYLEX` and `LIMIT` options.
$9
arguments
*7
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
start
$4
type
$6
string
$12
display_text
$5
start
*6
$4
name
$4
stop
$4
type
$6
string
$12
display_text
$4
stop
*10
$4
name
$6
sortby
$4
type
$5
oneof
$5
since
$5
6.2.0
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$7
byscore
$4
type
$10
pure-token
$12
display_text
$7
byscore
$5
token
$7
BYSCORE
*8
$4
name
$5
bylex
$4
type
$10
pure-token
$12
display_text
$5
bylex
$5
token
$5
BYLEX
*12
$4
name
$3
rev
$4
type
$10
pure-token
$12
display_text
$3
rev
$5
token
$3
REV
$5
since
$5
6.2.0
$5
flags
*1
+optional
*12
$4
name
$5
limit
$4
type
$5
block
$5
token
$5
LIMIT
$5
since
$5
6.2.0
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
*10
$4
name
$10
withscores
$4
type
$10
pure-token
$12
display_text
$10
withscores
$5
token
$10
WITHSCORES
$5
flags
*1
+optional
$3
ttl
*12
$7
summary
$48
Returns the expiration time in seconds of a key.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
2.8.0
$19
Added the -2 reply.
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$9
readwrite
*8
$7
summary
$76
Enables read-write queries for a connection to a Reids Cluster replica node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$8
replconf
*10
$7
summary
$59
An internal command for configuring the replication stream.
$5
since
$5
3.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$9
doc_flags
*1
+syscmd
$4
xlen
*10
$7
summary
$42
Return the number of messages in a stream.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$10
hrandfield
*10
$7
summary
$46
Returns one or more random fields from a hash.
$5
since
$5
6.2.0
$5
group
$4
hash
$10
complexity
$45
O(N) where N is the number of fields returned
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$7
options
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
*10
$4
name
$10
withvalues
$4
type
$10
pure-token
$12
display_text
$10
withvalues
$5
token
$10
WITHVALUES
$5
flags
*1
+optional
$11
unsubscribe
*10
$7
summary
$47
Stops listening to messages posted to channels.
$5
since
$5
2.0.0
$5
group
$6
pubsub
$10
complexity
$54
O(N) where N is the number of channels to unsubscribe.
$9
arguments
*1
*8
$4
name
$7
channel
$4
type
$6
string
$12
display_text
$7
channel
$5
flags
*2
+optional
+multiple
$4
xdel
*10
$7
summary
$65
Returns the number of messages after removing them from a stream.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$81
O(1) for each single item to delete in the stream, regardless of the stream size.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$2
id
$4
type
$6
string
$12
display_text
$2
id
$5
flags
*1
+multiple
$10
sintercard
*10
$7
summary
$64
Returns the number of members of the intersect of multiple sets.
$5
since
$5
7.0.0
$5
group
$3
set
$10
complexity
$93
O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.
$9
arguments
*3
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*10
$4
name
$5
limit
$4
type
$7
integer
$12
display_text
$5
limit
$5
token
$5
LIMIT
$5
flags
*1
+optional
$7
persist
*10
$7
summary
$37
Removes the expiration time of a key.
$5
since
$5
2.2.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
zscan
*10
$7
summary
$49
Iterates over members and scores of a sorted set.
$5
since
$5
2.8.0
$5
group
$10
sorted-set
$10
complexity
$169
O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
cursor
$4
type
$7
integer
$12
display_text
$6
cursor
*10
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$5
token
$5
MATCH
$5
flags
*1
+optional
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$7
zpopmax
*10
$7
summary
$128
Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
$5
since
$5
5.0.0
$5
group
$10
sorted-set
$10
complexity
$109
O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
flags
*1
+optional
$6
exists
*12
$7
summary
$42
Determines whether one or more keys exist.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$44
O(N) where N is the number of keys to check.
$7
history
*1
*2
$5
3.0.3
$33
Accepts multiple `key` arguments.
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$7
migrate
*12
$7
summary
$62
Atomically transfers a key from one Redis instance to another.
$5
since
$5
2.6.0
$5
group
$7
generic
$10
complexity
$223
This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.
$7
history
*4
*2
$5
3.0.0
$39
Added the `COPY` and `REPLACE` options.
*2
$5
3.0.6
$24
Added the `KEYS` option.
*2
$5
4.0.7
$24
Added the `AUTH` option.
*2
$5
6.0.0
$25
Added the `AUTH2` option.
$9
arguments
*9
*6
$4
name
$4
host
$4
type
$6
string
$12
display_text
$4
host
*6
$4
name
$4
port
$4
type
$7
integer
$12
display_text
$4
port
*6
$4
name
$12
key-selector
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$12
empty-string
$4
type
$10
pure-token
$12
display_text
$12
empty-string
$5
token
$0

*6
$4
name
$14
destination-db
$4
type
$7
integer
$12
display_text
$14
destination-db
*6
$4
name
$7
timeout
$4
type
$7
integer
$12
display_text
$7
timeout
*12
$4
name
$4
copy
$4
type
$10
pure-token
$12
display_text
$4
copy
$5
token
$4
COPY
$5
since
$5
3.0.0
$5
flags
*1
+optional
*12
$4
name
$7
replace
$4
type
$10
pure-token
$12
display_text
$7
replace
$5
token
$7
REPLACE
$5
since
$5
3.0.0
$5
flags
*1
+optional
*8
$4
name
$14
authentication
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*10
$4
name
$4
auth
$4
type
$6
string
$12
display_text
$8
password
$5
token
$4
AUTH
$5
since
$5
4.0.7
*10
$4
name
$5
auth2
$4
type
$5
block
$5
token
$5
AUTH2
$5
since
$5
6.0.0
$9
arguments
*2
*6
$4
name
$8
username
$4
type
$6
string
$12
display_text
$8
username
*6
$4
name
$8
password
$4
type
$6
string
$12
display_text
$8
password
*14
$4
name
$4
keys
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
token
$4
KEYS
$5
since
$5
3.0.6
$5
flags
*2
+optional
+multiple
$14
restore-asking
*14
$7
summary
$52
An internal command for migrating keys in a cluster.
$5
since
$5
3.0.0
$5
group
$6
server
$10
complexity
$386
O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).
$9
doc_flags
*1
+syscmd
$7
history
*3
*2
$5
3.0.0
$29
Added the `REPLACE` modifier.
*2
$5
5.0.0
$28
Added the `ABSTTL` modifier.
*2
$5
5.0.0
$40
Added the `IDLETIME` and `FREQ` options.
$9
arguments
*7
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
ttl
$4
type
$7
integer
$12
display_text
$3
ttl
*6
$4
name
$16
serialized-value
$4
type
$6
string
$12
display_text
$16
serialized-value
*12
$4
name
$7
replace
$4
type
$10
pure-token
$12
display_text
$7
replace
$5
token
$7
REPLACE
$5
since
$5
3.0.0
$5
flags
*1
+optional
*12
$4
name
$6
absttl
$4
type
$10
pure-token
$12
display_text
$6
absttl
$5
token
$6
ABSTTL
$5
since
$5
5.0.0
$5
flags
*1
+optional
*12
$4
name
$7
seconds
$4
type
$7
integer
$12
display_text
$7
seconds
$5
token
$8
IDLETIME
$5
since
$5
5.0.0
$5
flags
*1
+optional
*12
$4
name
$9
frequency
$4
type
$7
integer
$12
display_text
$9
frequency
$5
token
$4
FREQ
$5
since
$5
5.0.0
$5
flags
*1
+optional
$6
bgsave
*12
$7
summary
$45
Asynchronously saves the database(s) to disk.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
3.2.2
$28
Added the `SCHEDULE` option.
$9
arguments
*1
*12
$4
name
$8
schedule
$4
type
$10
pure-token
$12
display_text
$8
schedule
$5
token
$8
SCHEDULE
$5
since
$5
3.2.2
$5
flags
*1
+optional
$5
sscan
*10
$7
summary
$31
Iterates over members of a set.
$5
since
$5
2.8.0
$5
group
$3
set
$10
complexity
$169
O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
cursor
$4
type
$7
integer
$12
display_text
$6
cursor
*10
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$5
token
$5
MATCH
$5
flags
*1
+optional
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$9
geosearch
*12
$7
summary
$75
Queries a geospatial index for members inside an area of a box or a circle.
$5
since
$5
6.2.0
$5
group
$3
geo
$10
complexity
$169
O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape
$7
history
*1
*2
$5
7.0.0
$39
Added support for uppercase unit names.
$9
arguments
*8
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$4
from
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
token
$10
FROMMEMBER
*8
$4
name
$10
fromlonlat
$4
type
$5
block
$5
token
$10
FROMLONLAT
$9
arguments
*2
*6
$4
name
$9
longitude
$4
type
$6
double
$12
display_text
$9
longitude
*6
$4
name
$8
latitude
$4
type
$6
double
$12
display_text
$8
latitude
*6
$4
name
$2
by
$4
type
$5
oneof
$9
arguments
*2
*6
$4
name
$6
circle
$4
type
$5
block
$9
arguments
*2
*8
$4
name
$6
radius
$4
type
$6
double
$12
display_text
$6
radius
$5
token
$8
BYRADIUS
*6
$4
name
$4
unit
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$1
m
$4
type
$10
pure-token
$12
display_text
$1
m
$5
token
$1
M
*8
$4
name
$2
km
$4
type
$10
pure-token
$12
display_text
$2
km
$5
token
$2
KM
*8
$4
name
$2
ft
$4
type
$10
pure-token
$12
display_text
$2
ft
$5
token
$2
FT
*8
$4
name
$2
mi
$4
type
$10
pure-token
$12
display_text
$2
mi
$5
token
$2
MI
*6
$4
name
$3
box
$4
type
$5
block
$9
arguments
*3
*8
$4
name
$5
width
$4
type
$6
double
$12
display_text
$5
width
$5
token
$5
BYBOX
*6
$4
name
$6
height
$4
type
$6
double
$12
display_text
$6
height
*6
$4
name
$4
unit
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$1
m
$4
type
$10
pure-token
$12
display_text
$1
m
$5
token
$1
M
*8
$4
name
$2
km
$4
type
$10
pure-token
$12
display_text
$2
km
$5
token
$2
KM
*8
$4
name
$2
ft
$4
type
$10
pure-token
$12
display_text
$2
ft
$5
token
$2
FT
*8
$4
name
$2
mi
$4
type
$10
pure-token
$12
display_text
$2
mi
$5
token
$2
MI
*8
$4
name
$5
order
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$3
asc
$4
type
$10
pure-token
$12
display_text
$3
asc
$5
token
$3
ASC
*8
$4
name
$4
desc
$4
type
$10
pure-token
$12
display_text
$4
desc
$5
token
$4
DESC
*8
$4
name
$11
count-block
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
*10
$4
name
$3
any
$4
type
$10
pure-token
$12
display_text
$3
any
$5
token
$3
ANY
$5
flags
*1
+optional
*10
$4
name
$9
withcoord
$4
type
$10
pure-token
$12
display_text
$9
withcoord
$5
token
$9
WITHCOORD
$5
flags
*1
+optional
*10
$4
name
$8
withdist
$4
type
$10
pure-token
$12
display_text
$8
withdist
$5
token
$8
WITHDIST
$5
flags
*1
+optional
*10
$4
name
$8
withhash
$4
type
$10
pure-token
$12
display_text
$8
withhash
$5
token
$8
WITHHASH
$5
flags
*1
+optional
$6
xclaim
*10
$7
summary
$122
Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$78
O(log N) with N being the number of messages in the PEL of the consumer group.
$9
arguments
*11
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
*6
$4
name
$8
consumer
$4
type
$6
string
$12
display_text
$8
consumer
*6
$4
name
$13
min-idle-time
$4
type
$6
string
$12
display_text
$13
min-idle-time
*8
$4
name
$2
id
$4
type
$6
string
$12
display_text
$2
id
$5
flags
*1
+multiple
*10
$4
name
$2
ms
$4
type
$7
integer
$12
display_text
$2
ms
$5
token
$4
IDLE
$5
flags
*1
+optional
*10
$4
name
$22
unix-time-milliseconds
$4
type
$9
unix-time
$12
display_text
$22
unix-time-milliseconds
$5
token
$4
TIME
$5
flags
*1
+optional
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$10
RETRYCOUNT
$5
flags
*1
+optional
*10
$4
name
$5
force
$4
type
$10
pure-token
$12
display_text
$5
force
$5
token
$5
FORCE
$5
flags
*1
+optional
*10
$4
name
$6
justid
$4
type
$10
pure-token
$12
display_text
$6
justid
$5
token
$6
JUSTID
$5
flags
*1
+optional
*10
$4
name
$6
lastid
$4
type
$6
string
$12
display_text
$6
lastid
$5
token
$6
LASTID
$5
flags
*1
+optional
$12
sunsubscribe
*10
$7
summary
$53
Stops listening to messages posted to shard channels.
$5
since
$5
7.0.0
$5
group
$6
pubsub
$10
complexity
$60
O(N) where N is the number of shard channels to unsubscribe.
$9
arguments
*1
*8
$4
name
$12
shardchannel
$4
type
$6
string
$12
display_text
$12
shardchannel
$5
flags
*2
+optional
+multiple
$4
llen
*10
$7
summary
$29
Returns the length of a list.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$7
monitor
*6
$7
summary
$61
Listens for all requests received by the server in real-time.
$5
since
$5
1.0.0
$5
group
$6
server
$4
zadd
*12
$7
summary
$103
Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.
$5
since
$5
1.2.0
$5
group
$10
sorted-set
$10
complexity
$83
O(log(N)) for each item added, where N is the number of elements in the sorted set.
$7
history
*3
*2
$5
2.4.0
$26
Accepts multiple elements.
*2
$5
3.0.2
$46
Added the `XX`, `NX`, `CH` and `INCR` options.
*2
$5
6.2.0
$32
Added the `GT` and `LT` options.
$9
arguments
*6
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*10
$4
name
$9
condition
$4
type
$5
oneof
$5
since
$5
3.0.2
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$2
nx
$4
type
$10
pure-token
$12
display_text
$2
nx
$5
token
$2
NX
*8
$4
name
$2
xx
$4
type
$10
pure-token
$12
display_text
$2
xx
$5
token
$2
XX
*10
$4
name
$10
comparison
$4
type
$5
oneof
$5
since
$5
6.2.0
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$2
gt
$4
type
$10
pure-token
$12
display_text
$2
gt
$5
token
$2
GT
*8
$4
name
$2
lt
$4
type
$10
pure-token
$12
display_text
$2
lt
$5
token
$2
LT
*12
$4
name
$6
change
$4
type
$10
pure-token
$12
display_text
$6
change
$5
token
$2
CH
$5
since
$5
3.0.2
$5
flags
*1
+optional
*12
$4
name
$9
increment
$4
type
$10
pure-token
$12
display_text
$9
increment
$5
token
$4
INCR
$5
since
$5
3.0.2
$5
flags
*1
+optional
*8
$4
name
$4
data
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*2
*6
$4
name
$5
score
$4
type
$6
double
$12
display_text
$5
score
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$6
xrange
*12
$7
summary
$57
Returns the messages from a stream within a range of IDs.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$158
O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).
$7
history
*1
*2
$5
6.2.0
$23
Added exclusive ranges.
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
start
$4
type
$6
string
$12
display_text
$5
start
*6
$4
name
$3
end
$4
type
$6
string
$12
display_text
$3
end
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$5
zmpop
*10
$7
summary
$150
Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.
$5
since
$5
7.0.0
$5
group
$10
sorted-set
$10
complexity
$151
O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
$9
arguments
*4
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*6
$4
name
$5
where
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$3
min
$4
type
$10
pure-token
$12
display_text
$3
min
$5
token
$3
MIN
*8
$4
name
$3
max
$4
type
$10
pure-token
$12
display_text
$3
max
$5
token
$3
MAX
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$8
lastsave
*8
$7
summary
$63
Returns the Unix timestamp of the last successful save to disk.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$6
select
*10
$7
summary
$30
Changes the selected database.
$5
since
$5
1.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$5
index
$4
type
$7
integer
$12
display_text
$5
index
$11
sunionstore
*10
$7
summary
$43
Stores the union of multiple sets in a key.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$63
O(N) where N is the total number of elements in all given sets.
$9
arguments
*2
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:0
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
flags
*1
+multiple
$10
evalsha_ro
*10
$7
summary
$59
Executes a read-only server-side Lua script by SHA1 digest.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$39
Depends on the script that is executed.
$9
arguments
*4
*6
$4
name
$4
sha1
$4
type
$6
string
$12
display_text
$4
sha1
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*2
+optional
+multiple
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$8
spublish
*10
$7
summary
$33
Post a message to a shard channel
$5
since
$5
7.0.0
$5
group
$6
pubsub
$10
complexity
$80
O(N) where N is the number of clients subscribed to the receiving shard channel.
$9
arguments
*2
*6
$4
name
$12
shardchannel
$4
type
$6
string
$12
display_text
$12
shardchannel
*6
$4
name
$7
message
$4
type
$6
string
$12
display_text
$7
message
$4
incr
*10
$7
summary
$95
Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$10
smismember
*10
$7
summary
$52
Determines whether multiple members belong to a set.
$5
since
$5
6.2.0
$5
group
$3
set
$10
complexity
$67
O(N) where N is the number of elements being checked for membership
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
flags
*1
+multiple
$5
xtrim
*12
$7
summary
$48
Deletes messages from the beginning of a stream.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$208
O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.
$7
history
*1
*2
$5
6.2.0
$59
Added the `MINID` trimming strategy and the `LIMIT` option.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$4
trim
$4
type
$5
block
$9
arguments
*4
*6
$4
name
$8
strategy
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$6
maxlen
$4
type
$10
pure-token
$12
display_text
$6
maxlen
$5
token
$6
MAXLEN
*10
$4
name
$5
minid
$4
type
$10
pure-token
$12
display_text
$5
minid
$5
token
$5
MINID
$5
since
$5
6.2.0
*8
$4
name
$8
operator
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
equal
$4
type
$10
pure-token
$12
display_text
$5
equal
$5
token
$1
=
*8
$4
name
$13
approximately
$4
type
$10
pure-token
$12
display_text
$13
approximately
$5
token
$1
~
*6
$4
name
$9
threshold
$4
type
$6
string
$12
display_text
$9
threshold
*12
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
LIMIT
$5
since
$5
6.2.0
$5
flags
*1
+optional
$4
role
*8
$7
summary
$29
Returns the replication role.
$5
since
$6
2.8.12
$5
group
$6
server
$10
complexity
$4
O(1)
$4
keys
*10
$7
summary
$43
Returns all key names that match a pattern.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$152
O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.
$9
arguments
*1
*6
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$11
incrbyfloat
*10
$7
summary
$106
Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.
$5
since
$5
2.6.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$9
increment
$4
type
$6
double
$12
display_text
$9
increment
$6
blmove
*10
$7
summary
$166
Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.
$5
since
$5
6.2.0
$5
group
$4
list
$10
complexity
$4
O(1)
$9
arguments
*5
*8
$4
name
$6
source
$4
type
$3
key
$12
display_text
$6
source
$14
key_spec_index
:0
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:1
*6
$4
name
$9
wherefrom
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$4
left
$4
type
$10
pure-token
$12
display_text
$4
left
$5
token
$4
LEFT
*8
$4
name
$5
right
$4
type
$10
pure-token
$12
display_text
$5
right
$5
token
$5
RIGHT
*6
$4
name
$7
whereto
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$4
left
$4
type
$10
pure-token
$12
display_text
$4
left
$5
token
$4
LEFT
*8
$4
name
$5
right
$4
type
$10
pure-token
$12
display_text
$5
right
$5
token
$5
RIGHT
*6
$4
name
$7
timeout
$4
type
$6
double
$12
display_text
$7
timeout
$3
acl
*10
$7
summary
$45
A container for Access List Control commands.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*26
$11
acl|genpass
*10
$7
summary
$81
Generates a pseudorandom, secure password that can be used to identify ACL users.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$4
bits
$4
type
$7
integer
$12
display_text
$4
bits
$5
flags
*1
+optional
$8
acl|save
*8
$7
summary
$57
Saves the effective ACL rules in the configured ACL file.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$48
O(N). Where N is the number of configured users.
$8
acl|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$10
acl|dryrun
*10
$7
summary
$78
Simulates the execution of a command by a user, without executing the command.
$5
since
$5
7.0.0
$5
group
$6
server
$10
complexity
$5
O(1).
$9
arguments
*3
*6
$4
name
$8
username
$4
type
$6
string
$12
display_text
$8
username
*6
$4
name
$7
command
$4
type
$6
string
$12
display_text
$7
command
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$9
acl|users
*8
$7
summary
$20
Lists all ACL users.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$48
O(N). Where N is the number of configured users.
$7
acl|log
*12
$7
summary
$56
Lists recent security events generated due to ACL rules.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$46
O(N) with N being the number of entries shown.
$7
history
*1
*2
$5
7.2.0
$62
Added entry ID, timestamp created, and timestamp last updated.
$9
arguments
*1
*8
$4
name
$9
operation
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
*8
$4
name
$5
reset
$4
type
$10
pure-token
$12
display_text
$5
reset
$5
token
$5
RESET
$11
acl|setuser
*12
$7
summary
$47
Creates and modifies an ACL user and its rules.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$46
O(N). Where N is the number of rules provided.
$7
history
*2
*2
$5
6.2.0
$31
Added Pub/Sub channel patterns.
*2
$5
7.0.0
$42
Added selectors and key based permissions.
$9
arguments
*2
*6
$4
name
$8
username
$4
type
$6
string
$12
display_text
$8
username
*8
$4
name
$4
rule
$4
type
$6
string
$12
display_text
$4
rule
$5
flags
*2
+optional
+multiple
$7
acl|cat
*10
$7
summary
$60
Lists the ACL categories, or the commands inside a category.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$55
O(1) since the categories and commands are a fixed set.
$9
arguments
*1
*8
$4
name
$8
category
$4
type
$6
string
$12
display_text
$8
category
$5
flags
*1
+optional
$11
acl|getuser
*12
$7
summary
$30
Lists the ACL rules of a user.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$85
O(N). Where N is the number of password, command and pattern rules that the user has.
$7
history
*2
*2
$5
6.2.0
$31
Added Pub/Sub channel patterns.
*2
$5
7.0.0
$108
Added selectors and changed the format of key and channel patterns from a list to their rule representation.
$9
arguments
*1
*6
$4
name
$8
username
$4
type
$6
string
$12
display_text
$8
username
$8
acl|load
*8
$7
summary
$47
Reloads the rules from the configured ACL file.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$48
O(N). Where N is the number of configured users.
$11
acl|deluser
*10
$7
summary
$52
Deletes ACL users, and terminates their connections.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$49
O(1) amortized time considering the typical user.
$9
arguments
*1
*8
$4
name
$8
username
$4
type
$6
string
$12
display_text
$8
username
$5
flags
*1
+multiple
$8
acl|list
*8
$7
summary
$45
Dumps the effective rules in ACL file format.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$48
O(N). Where N is the number of configured users.
$10
acl|whoami
*8
$7
summary
$61
Returns the authenticated username of the current connection.
$5
since
$5
6.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$5
sdiff
*10
$7
summary
$40
Returns the difference of multiple sets.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$63
O(N) where N is the total number of elements in all given sets.
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$14
zrevrangebylex
*16
$7
summary
$80
Returns members in a sorted set within a lexicographical range in reverse order.
$5
since
$5
2.8.9
$5
group
$10
sorted-set
$10
complexity
$217
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$45
`ZRANGE` with the `REV` and `BYLEX` arguments
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
max
$4
type
$6
string
$12
display_text
$3
max
*6
$4
name
$3
min
$4
type
$6
string
$12
display_text
$3
min
*10
$4
name
$5
limit
$4
type
$5
block
$5
token
$5
LIMIT
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$7
waitaof
*10
$7
summary
$138
Blocks until all of the preceding write commands sent by the connection are written to the append-only file of the master and/or replicas.
$5
since
$5
7.2.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*3
*6
$4
name
$8
numlocal
$4
type
$7
integer
$12
display_text
$8
numlocal
*6
$4
name
$11
numreplicas
$4
type
$7
integer
$12
display_text
$11
numreplicas
*6
$4
name
$7
timeout
$4
type
$7
integer
$12
display_text
$7
timeout
$8
shutdown
*12
$7
summary
$76
Synchronously saves the database(s) to disk and shuts down the Redis server.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$103
O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)
$7
history
*1
*2
$5
7.0.0
$47
Added the `NOW`, `FORCE` and `ABORT` modifiers.
$9
arguments
*4
*8
$4
name
$13
save-selector
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$6
nosave
$4
type
$10
pure-token
$12
display_text
$6
nosave
$5
token
$6
NOSAVE
*8
$4
name
$4
save
$4
type
$10
pure-token
$12
display_text
$4
save
$5
token
$4
SAVE
*12
$4
name
$3
now
$4
type
$10
pure-token
$12
display_text
$3
now
$5
token
$3
NOW
$5
since
$5
7.0.0
$5
flags
*1
+optional
*12
$4
name
$5
force
$4
type
$10
pure-token
$12
display_text
$5
force
$5
token
$5
FORCE
$5
since
$5
7.0.0
$5
flags
*1
+optional
*12
$4
name
$5
abort
$4
type
$10
pure-token
$12
display_text
$5
abort
$5
token
$5
ABORT
$5
since
$5
7.0.0
$5
flags
*1
+optional
$10
ssubscribe
*10
$7
summary
$49
Listens for messages published to shard channels.
$5
since
$5
7.0.0
$5
group
$6
pubsub
$10
complexity
$61
O(N) where N is the number of shard channels to subscribe to.
$9
arguments
*1
*8
$4
name
$12
shardchannel
$4
type
$6
string
$12
display_text
$12
shardchannel
$5
flags
*1
+multiple
$5
zcard
*10
$7
summary
$46
Returns the number of members in a sorted set.
$5
since
$5
1.2.0
$5
group
$10
sorted-set
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$3
set
*12
$7
summary
$90
Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$4
O(1)
$7
history
*4
*2
$6
2.6.12
$44
Added the `EX`, `PX`, `NX` and `XX` options.
*2
$5
6.0.0
$27
Added the `KEEPTTL` option.
*2
$5
6.2.0
$42
Added the `GET`, `EXAT` and `PXAT` option.
*2
$5
7.0.0
$55
Allowed the `NX` and `GET` options to be used together.
$9
arguments
*5
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
*10
$4
name
$9
condition
$4
type
$5
oneof
$5
since
$6
2.6.12
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$2
nx
$4
type
$10
pure-token
$12
display_text
$2
nx
$5
token
$2
NX
*8
$4
name
$2
xx
$4
type
$10
pure-token
$12
display_text
$2
xx
$5
token
$2
XX
*12
$4
name
$3
get
$4
type
$10
pure-token
$12
display_text
$3
get
$5
token
$3
GET
$5
since
$5
6.2.0
$5
flags
*1
+optional
*8
$4
name
$10
expiration
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*5
*10
$4
name
$7
seconds
$4
type
$7
integer
$12
display_text
$7
seconds
$5
token
$2
EX
$5
since
$6
2.6.12
*10
$4
name
$12
milliseconds
$4
type
$7
integer
$12
display_text
$12
milliseconds
$5
token
$2
PX
$5
since
$6
2.6.12
*10
$4
name
$17
unix-time-seconds
$4
type
$9
unix-time
$12
display_text
$17
unix-time-seconds
$5
token
$4
EXAT
$5
since
$5
6.2.0
*10
$4
name
$22
unix-time-milliseconds
$4
type
$9
unix-time
$12
display_text
$22
unix-time-milliseconds
$5
token
$4
PXAT
$5
since
$5
6.2.0
*10
$4
name
$7
keepttl
$4
type
$10
pure-token
$12
display_text
$7
keepttl
$5
token
$7
KEEPTTL
$5
since
$5
6.0.0
$4
xack
*10
$7
summary
$108
Returns the number of messages that were successfully acknowledged by the consumer group member of a stream.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$35
O(1) for each message ID processed.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
*8
$4
name
$2
id
$4
type
$6
string
$12
display_text
$2
id
$5
flags
*1
+multiple
$10
expiretime
*10
$7
summary
$57
Returns the expiration time of a key as a Unix timestamp.
$5
since
$5
7.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$3
lcs
*10
$7
summary
$35
Finds the longest common substring.
$5
since
$5
7.0.0
$5
group
$6
string
$10
complexity
$63
O(N*M) where N and M are the lengths of s1 and s2, respectively
$9
arguments
*6
*8
$4
name
$4
key1
$4
type
$3
key
$12
display_text
$4
key1
$14
key_spec_index
:0
*8
$4
name
$4
key2
$4
type
$3
key
$12
display_text
$4
key2
$14
key_spec_index
:0
*10
$4
name
$3
len
$4
type
$10
pure-token
$12
display_text
$3
len
$5
token
$3
LEN
$5
flags
*1
+optional
*10
$4
name
$3
idx
$4
type
$10
pure-token
$12
display_text
$3
idx
$5
token
$3
IDX
$5
flags
*1
+optional
*10
$4
name
$13
min-match-len
$4
type
$7
integer
$12
display_text
$13
min-match-len
$5
token
$11
MINMATCHLEN
$5
flags
*1
+optional
*10
$4
name
$12
withmatchlen
$4
type
$10
pure-token
$12
display_text
$12
withmatchlen
$5
token
$12
WITHMATCHLEN
$5
flags
*1
+optional
$6
blmpop
*10
$7
summary
$147
Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.
$5
since
$5
7.0.0
$5
group
$4
list
$10
complexity
$87
O(N+M) where N is the number of provided keys and M is the number of elements returned.
$9
arguments
*5
*6
$4
name
$7
timeout
$4
type
$6
double
$12
display_text
$7
timeout
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*6
$4
name
$5
where
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$4
left
$4
type
$10
pure-token
$12
display_text
$4
left
$5
token
$4
LEFT
*8
$4
name
$5
right
$4
type
$10
pure-token
$12
display_text
$5
right
$5
token
$5
RIGHT
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$7
flushdb
*12
$7
summary
$42
Remove all keys from the current database.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$59
O(N) where N is the number of keys in the selected database
$7
history
*2
*2
$5
4.0.0
$41
Added the `ASYNC` flushing mode modifier.
*2
$5
6.2.0
$40
Added the `SYNC` flushing mode modifier.
$9
arguments
*1
*8
$4
name
$10
flush-type
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*10
$4
name
$5
async
$4
type
$10
pure-token
$12
display_text
$5
async
$5
token
$5
ASYNC
$5
since
$5
4.0.0
*10
$4
name
$4
sync
$4
type
$10
pure-token
$12
display_text
$4
sync
$5
token
$4
SYNC
$5
since
$5
6.2.0
$11
zrangestore
*10
$7
summary
$51
Stores a range of members from sorted set in a key.
$5
since
$5
6.2.0
$5
group
$10
sorted-set
$10
complexity
$127
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.
$9
arguments
*7
*8
$4
name
$3
dst
$4
type
$3
key
$12
display_text
$3
dst
$14
key_spec_index
:0
*8
$4
name
$3
src
$4
type
$3
key
$12
display_text
$3
src
$14
key_spec_index
:1
*6
$4
name
$3
min
$4
type
$6
string
$12
display_text
$3
min
*6
$4
name
$3
max
$4
type
$6
string
$12
display_text
$3
max
*8
$4
name
$6
sortby
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$7
byscore
$4
type
$10
pure-token
$12
display_text
$7
byscore
$5
token
$7
BYSCORE
*8
$4
name
$5
bylex
$4
type
$10
pure-token
$12
display_text
$5
bylex
$5
token
$5
BYLEX
*10
$4
name
$3
rev
$4
type
$10
pure-token
$12
display_text
$3
rev
$5
token
$3
REV
$5
flags
*1
+optional
*10
$4
name
$5
limit
$4
type
$5
block
$5
token
$5
LIMIT
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$6
dbsize
*8
$7
summary
$43
Returns the number of keys in the database.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$7
cluster
*10
$7
summary
$39
A container for Redis Cluster commands.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*56
$12
cluster|info
*8
$7
summary
$46
Returns information about the state of a node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$14
cluster|slaves
*16
$7
summary
$41
Lists the replica nodes of a master node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$39
O(N) where N is the number of replicas.
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
5.0.0
$11
replaced_by
$18
`CLUSTER REPLICAS`
$9
arguments
*1
*6
$4
name
$7
node-id
$4
type
$6
string
$12
display_text
$7
node-id
$29
cluster|count-failure-reports
*10
$7
summary
$63
Returns the number of active failure reports active for a node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$45
O(N) where N is the number of failure reports
$9
arguments
*1
*6
$4
name
$7
node-id
$4
type
$6
string
$12
display_text
$7
node-id
$18
cluster|flushslots
*8
$7
summary
$42
Deletes all slots information from a node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$16
cluster|failover
*10
$7
summary
$60
Forces a replica to perform a manual failover of its master.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$7
options
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
force
$4
type
$10
pure-token
$12
display_text
$5
force
$5
token
$5
FORCE
*8
$4
name
$8
takeover
$4
type
$10
pure-token
$12
display_text
$8
takeover
$5
token
$8
TAKEOVER
$21
cluster|delslotsrange
*10
$7
summary
$44
Sets hash slot ranges as unbound for a node.
$5
since
$5
7.0.0
$5
group
$7
cluster
$10
complexity
$92
O(N) where N is the total number of the slots between the start slot and end slot arguments.
$9
arguments
*1
*8
$4
name
$5
range
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*2
*6
$4
name
$10
start-slot
$4
type
$7
integer
$12
display_text
$10
start-slot
*6
$4
name
$8
end-slot
$4
type
$7
integer
$12
display_text
$8
end-slot
$14
cluster|forget
*10
$7
summary
$36
Removes a node from the nodes table.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$7
node-id
$4
type
$6
string
$12
display_text
$7
node-id
$13
cluster|reset
*10
$7
summary
$14
Resets a node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$95
O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.
$9
arguments
*1
*8
$4
name
$10
reset-type
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$4
hard
$4
type
$10
pure-token
$12
display_text
$4
hard
$5
token
$4
HARD
*8
$4
name
$4
soft
$4
type
$10
pure-token
$12
display_text
$4
soft
$5
token
$4
SOFT
$16
cluster|delslots
*10
$7
summary
$38
Sets hash slots as unbound for a node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$55
O(N) where N is the total number of hash slot arguments
$9
arguments
*1
*8
$4
name
$4
slot
$4
type
$7
integer
$12
display_text
$4
slot
$5
flags
*1
+multiple
$23
cluster|countkeysinslot
*10
$7
summary
$42
Returns the number of keys in a hash slot.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$4
slot
$4
type
$7
integer
$12
display_text
$4
slot
$21
cluster|addslotsrange
*10
$7
summary
$39
Assigns new hash slot ranges to a node.
$5
since
$5
7.0.0
$5
group
$7
cluster
$10
complexity
$92
O(N) where N is the total number of the slots between the start slot and end slot arguments.
$9
arguments
*1
*8
$4
name
$5
range
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*2
*6
$4
name
$10
start-slot
$4
type
$7
integer
$12
display_text
$10
start-slot
*6
$4
name
$8
end-slot
$4
type
$7
integer
$12
display_text
$8
end-slot
$12
cluster|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
5.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$12
cluster|myid
*8
$7
summary
$25
Returns the ID of a node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$13
cluster|nodes
*8
$7
summary
$45
Returns the cluster configuration for a node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$49
O(N) where N is the total number of Cluster nodes
$15
cluster|setslot
*10
$7
summary
$28
Binds a hash slot to a node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$9
arguments
*2
*6
$4
name
$4
slot
$4
type
$7
integer
$12
display_text
$4
slot
*6
$4
name
$10
subcommand
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$9
importing
$4
type
$6
string
$12
display_text
$7
node-id
$5
token
$9
IMPORTING
*8
$4
name
$9
migrating
$4
type
$6
string
$12
display_text
$7
node-id
$5
token
$9
MIGRATING
*8
$4
name
$4
node
$4
type
$6
string
$12
display_text
$7
node-id
$5
token
$4
NODE
*8
$4
name
$6
stable
$4
type
$10
pure-token
$12
display_text
$6
stable
$5
token
$6
STABLE
$21
cluster|getkeysinslot
*10
$7
summary
$37
Returns the key names in a hash slot.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$44
O(N) where N is the number of requested keys
$9
arguments
*2
*6
$4
name
$4
slot
$4
type
$7
integer
$12
display_text
$4
slot
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$15
cluster|keyslot
*10
$7
summary
$32
Returns the hash slot for a key.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$46
O(N) where N is the number of bytes in the key
$9
arguments
*1
*6
$4
name
$3
key
$4
type
$6
string
$12
display_text
$3
key
$12
cluster|meet
*12
$7
summary
$45
Forces a node to handshake with another node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
4.0.0
$47
Added the optional `cluster_bus_port` argument.
$9
arguments
*3
*6
$4
name
$2
ip
$4
type
$6
string
$12
display_text
$2
ip
*6
$4
name
$4
port
$4
type
$7
integer
$12
display_text
$4
port
*10
$4
name
$16
cluster-bus-port
$4
type
$7
integer
$12
display_text
$16
cluster-bus-port
$5
since
$5
4.0.0
$5
flags
*1
+optional
$17
cluster|replicate
*10
$7
summary
$45
Configure a node as replica of a master node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$7
node-id
$4
type
$6
string
$12
display_text
$7
node-id
$13
cluster|slots
*16
$7
summary
$46
Returns the mapping of cluster slots to nodes.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$49
O(N) where N is the total number of Cluster nodes
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
7.0.0
$11
replaced_by
$16
`CLUSTER SHARDS`
$7
history
*2
*2
$5
4.0.0
$15
Added node IDs.
*2
$5
7.0.0
$43
Added additional networking metadata field.
$24
cluster|set-config-epoch
*10
$7
summary
$44
Sets the configuration epoch for a new node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$12
config-epoch
$4
type
$7
integer
$12
display_text
$12
config-epoch
$16
cluster|addslots
*10
$7
summary
$33
Assigns new hash slots to a node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$55
O(N) where N is the total number of hash slot arguments
$9
arguments
*1
*8
$4
name
$4
slot
$4
type
$7
integer
$12
display_text
$4
slot
$5
flags
*1
+multiple
$17
cluster|bumpepoch
*8
$7
summary
$34
Advances the cluster config epoch.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$16
cluster|replicas
*10
$7
summary
$41
Lists the replica nodes of a master node.
$5
since
$5
5.0.0
$5
group
$7
cluster
$10
complexity
$39
O(N) where N is the number of replicas.
$9
arguments
*1
*6
$4
name
$7
node-id
$4
type
$6
string
$12
display_text
$7
node-id
$13
cluster|links
*8
$7
summary
$55
Returns a list of all TCP links to and from peer nodes.
$5
since
$5
7.0.0
$5
group
$7
cluster
$10
complexity
$49
O(N) where N is the total number of Cluster nodes
$18
cluster|saveconfig
*8
$7
summary
$56
Forces a node to save the cluster configuration to disk.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$17
cluster|myshardid
*8
$7
summary
$31
Returns the shard ID of a node.
$5
since
$5
7.2.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$14
cluster|shards
*8
$7
summary
$47
Returns the mapping of cluster slots to shards.
$5
since
$5
7.0.0
$5
group
$7
cluster
$10
complexity
$49
O(N) where N is the total number of cluster nodes
$4
pttl
*12
$7
summary
$53
Returns the expiration time in milliseconds of a key.
$5
since
$5
2.6.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
2.8.0
$19
Added the -2 reply.
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$11
zunionstore
*10
$7
summary
$50
Stores the union of multiple sorted sets in a key.
$5
since
$5
2.0.0
$5
group
$10
sorted-set
$10
complexity
$140
O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
$9
arguments
*5
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:0
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
flags
*1
+multiple
*10
$4
name
$6
weight
$4
type
$7
integer
$12
display_text
$6
weight
$5
token
$7
WEIGHTS
$5
flags
*2
+optional
+multiple
*10
$4
name
$9
aggregate
$4
type
$5
oneof
$5
token
$9
AGGREGATE
$5
flags
*1
+optional
$9
arguments
*3
*8
$4
name
$3
sum
$4
type
$10
pure-token
$12
display_text
$3
sum
$5
token
$3
SUM
*8
$4
name
$3
min
$4
type
$10
pure-token
$12
display_text
$3
min
$5
token
$3
MIN
*8
$4
name
$3
max
$4
type
$10
pure-token
$12
display_text
$3
max
$5
token
$3
MAX
$4
xadd
*12
$7
summary
$71
Appends a new message to a stream. Creates the key if it doesn't exist.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$93
O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.
$7
history
*2
*2
$5
6.2.0
$80
Added the `NOMKSTREAM` option, `MINID` trimming strategy and the `LIMIT` option.
*2
$5
7.0.0
$48
Added support for the `<ms>-*` explicit ID form.
$9
arguments
*5
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*12
$4
name
$10
nomkstream
$4
type
$10
pure-token
$12
display_text
$10
nomkstream
$5
token
$10
NOMKSTREAM
$5
since
$5
6.2.0
$5
flags
*1
+optional
*8
$4
name
$4
trim
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*4
*6
$4
name
$8
strategy
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$6
maxlen
$4
type
$10
pure-token
$12
display_text
$6
maxlen
$5
token
$6
MAXLEN
*10
$4
name
$5
minid
$4
type
$10
pure-token
$12
display_text
$5
minid
$5
token
$5
MINID
$5
since
$5
6.2.0
*8
$4
name
$8
operator
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
equal
$4
type
$10
pure-token
$12
display_text
$5
equal
$5
token
$1
=
*8
$4
name
$13
approximately
$4
type
$10
pure-token
$12
display_text
$13
approximately
$5
token
$1
~
*6
$4
name
$9
threshold
$4
type
$6
string
$12
display_text
$9
threshold
*12
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
LIMIT
$5
since
$5
6.2.0
$5
flags
*1
+optional
*6
$4
name
$11
id-selector
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$7
auto-id
$4
type
$10
pure-token
$12
display_text
$7
auto-id
$5
token
$1
*
*6
$4
name
$2
id
$4
type
$6
string
$12
display_text
$2
id
*8
$4
name
$4
data
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*2
*6
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$6
geoadd
*12
$7
summary
$87
Adds one or more members to a geospatial index. The key is created if it doesn't exist.
$5
since
$5
3.2.0
$5
group
$3
geo
$10
complexity
$83
O(log(N)) for each item added, where N is the number of elements in the sorted set.
$7
history
*1
*2
$5
6.2.0
$38
Added the `CH`, `NX` and `XX` options.
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*10
$4
name
$9
condition
$4
type
$5
oneof
$5
since
$5
6.2.0
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$2
nx
$4
type
$10
pure-token
$12
display_text
$2
nx
$5
token
$2
NX
*8
$4
name
$2
xx
$4
type
$10
pure-token
$12
display_text
$2
xx
$5
token
$2
XX
*12
$4
name
$6
change
$4
type
$10
pure-token
$12
display_text
$6
change
$5
token
$2
CH
$5
since
$5
6.2.0
$5
flags
*1
+optional
*8
$4
name
$4
data
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*3
*6
$4
name
$9
longitude
$4
type
$6
double
$12
display_text
$9
longitude
*6
$4
name
$8
latitude
$4
type
$6
double
$12
display_text
$8
latitude
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$16
zremrangebyscore
*10
$7
summary
$109
Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.
$5
since
$5
1.2.0
$5
group
$10
sorted-set
$10
complexity
$120
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
min
$4
type
$6
double
$12
display_text
$3
min
*6
$4
name
$3
max
$4
type
$6
double
$12
display_text
$3
max
$5
scard
*10
$7
summary
$39
Returns the number of members in a set.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$13
zrangebyscore
*18
$7
summary
$57
Returns members in a sorted set within a range of scores.
$5
since
$5
1.0.5
$5
group
$10
sorted-set
$10
complexity
$217
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$36
`ZRANGE` with the `BYSCORE` argument
$7
history
*1
*2
$5
2.0.0
$32
Added the `WITHSCORES` modifier.
$9
arguments
*5
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
min
$4
type
$6
double
$12
display_text
$3
min
*6
$4
name
$3
max
$4
type
$6
double
$12
display_text
$3
max
*12
$4
name
$10
withscores
$4
type
$10
pure-token
$12
display_text
$10
withscores
$5
token
$10
WITHSCORES
$5
since
$5
2.0.0
$5
flags
*1
+optional
*10
$4
name
$5
limit
$4
type
$5
block
$5
token
$5
LIMIT
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$6
getset
*16
$7
summary
$75
Returns the previous string value of a key after setting it to a new value.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$30
`SET` with the `!GET` argument
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$6
pubsub
*10
$7
summary
$33
A container for Pub/Sub commands.
$5
since
$5
2.8.0
$5
group
$6
pubsub
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*12
$13
pubsub|numpat
*8
$7
summary
$48
Returns a count of unique pattern subscriptions.
$5
since
$5
2.8.0
$5
group
$6
pubsub
$10
complexity
$4
O(1)
$13
pubsub|numsub
*10
$7
summary
$43
Returns a count of subscribers to channels.
$5
since
$5
2.8.0
$5
group
$6
pubsub
$10
complexity
$75
O(N) for the NUMSUB subcommand, where N is the number of requested channels
$9
arguments
*1
*8
$4
name
$7
channel
$4
type
$6
string
$12
display_text
$7
channel
$5
flags
*2
+optional
+multiple
$11
pubsub|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
6.2.0
$5
group
$6
pubsub
$10
complexity
$4
O(1)
$18
pubsub|shardnumsub
*10
$7
summary
$51
Returns the count of subscribers of shard channels.
$5
since
$5
7.0.0
$5
group
$6
pubsub
$10
complexity
$86
O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels
$9
arguments
*1
*8
$4
name
$12
shardchannel
$4
type
$6
string
$12
display_text
$12
shardchannel
$5
flags
*2
+optional
+multiple
$20
pubsub|shardchannels
*10
$7
summary
$34
Returns the active shard channels.
$5
since
$5
7.0.0
$5
group
$6
pubsub
$10
complexity
$131
O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).
$9
arguments
*1
*8
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$5
flags
*1
+optional
$15
pubsub|channels
*10
$7
summary
$28
Returns the active channels.
$5
since
$5
2.8.0
$5
group
$6
pubsub
$10
complexity
$131
O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)
$9
arguments
*1
*8
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$5
flags
*1
+optional
$8
setrange
*10
$7
summary
$99
Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.
$5
since
$5
2.2.0
$5
group
$6
string
$10
complexity
$215
O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$6
rpushx
*12
$7
summary
$55
Appends an element to a list only when the list exists.
$5
since
$5
2.2.0
$5
group
$4
list
$10
complexity
$106
O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
$7
history
*1
*2
$5
4.0.0
$37
Accepts multiple `element` arguments.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$7
element
$4
type
$6
string
$12
display_text
$7
element
$5
flags
*1
+multiple
$6
bitpos
*12
$7
summary
$53
Finds the first set (1) or clear (0) bit in a string.
$5
since
$5
2.8.7
$5
group
$6
bitmap
$10
complexity
$4
O(N)
$7
history
*1
*2
$5
7.0.0
$28
Added the `BYTE|BIT` option.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
bit
$4
type
$7
integer
$12
display_text
$3
bit
*8
$4
name
$5
range
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$5
start
$4
type
$7
integer
$12
display_text
$5
start
*8
$4
name
$14
end-unit-block
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$3
end
$4
type
$7
integer
$12
display_text
$3
end
*10
$4
name
$4
unit
$4
type
$5
oneof
$5
since
$5
7.0.0
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$4
byte
$4
type
$10
pure-token
$12
display_text
$4
byte
$5
token
$4
BYTE
*8
$4
name
$3
bit
$4
type
$10
pure-token
$12
display_text
$3
bit
$5
token
$3
BIT
$6
hsetnx
*10
$7
summary
$70
Sets the value of a field in a hash only when the field doesn't exist.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$4
O(1)
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$4
echo
*10
$7
summary
$25
Returns the given string.
$5
since
$5
1.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$7
message
$4
type
$6
string
$12
display_text
$7
message
$11
zrandmember
*10
$7
summary
$53
Returns one or more random members from a sorted set.
$5
since
$5
6.2.0
$5
group
$10
sorted-set
$10
complexity
$46
O(N) where N is the number of members returned
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$7
options
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
*10
$4
name
$10
withscores
$4
type
$10
pure-token
$12
display_text
$10
withscores
$5
token
$10
WITHSCORES
$5
flags
*1
+optional
$5
hello
*12
$7
summary
$33
Handshakes with the Redis server.
$5
since
$5
6.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
6.2.0
$109
`protover` made optional; when called without arguments the command reports the current connection's context.
$9
arguments
*1
*8
$4
name
$9
arguments
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*3
*6
$4
name
$8
protover
$4
type
$7
integer
$12
display_text
$8
protover
*10
$4
name
$4
auth
$4
type
$5
block
$5
token
$4
AUTH
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$8
username
$4
type
$6
string
$12
display_text
$8
username
*6
$4
name
$8
password
$4
type
$6
string
$12
display_text
$8
password
*10
$4
name
$10
clientname
$4
type
$6
string
$12
display_text
$10
clientname
$5
token
$7
SETNAME
$5
flags
*1
+optional
$4
mget
*10
$7
summary
$57
Atomically returns the string values of one or more keys.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$47
O(N) where N is the number of keys to retrieve.
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$3
get
*10
$7
summary
$34
Returns the string value of a key.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$8
expireat
*12
$7
summary
$54
Sets the expiration time of a key to a Unix timestamp.
$5
since
$5
1.2.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.0.0
$41
Added options: `NX`, `XX`, `GT` and `LT`.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$17
unix-time-seconds
$4
type
$9
unix-time
$12
display_text
$17
unix-time-seconds
*10
$4
name
$9
condition
$4
type
$5
oneof
$5
since
$5
7.0.0
$5
flags
*1
+optional
$9
arguments
*4
*8
$4
name
$2
nx
$4
type
$10
pure-token
$12
display_text
$2
nx
$5
token
$2
NX
*8
$4
name
$2
xx
$4
type
$10
pure-token
$12
display_text
$2
xx
$5
token
$2
XX
*8
$4
name
$2
gt
$4
type
$10
pure-token
$12
display_text
$2
gt
$5
token
$2
GT
*8
$4
name
$2
lt
$4
type
$10
pure-token
$12
display_text
$2
lt
$5
token
$2
LT
$6
sunion
*10
$7
summary
$35
Returns the union of multiple sets.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$63
O(N) where N is the total number of elements in all given sets.
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$7
command
*10
$7
summary
$48
Returns detailed information about all commands.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$50
O(N) where N is the total number of Redis commands
$11
subcommands
*14
$12
command|info
*12
$7
summary
$56
Returns information about one, multiple or all commands.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$49
O(N) where N is the number of commands to look up
$7
history
*1
*2
$5
7.0.0
$66
Allowed to be called with no argument to get info on all commands.
$9
arguments
*1
*8
$4
name
$12
command-name
$4
type
$6
string
$12
display_text
$12
command-name
$5
flags
*2
+optional
+multiple
$12
command|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
5.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$15
command|getkeys
*10
$7
summary
$49
Extracts the key names from an arbitrary command.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$54
O(N) where N is the number of arguments to the command
$9
arguments
*2
*6
$4
name
$7
command
$4
type
$6
string
$12
display_text
$7
command
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$23
command|getkeysandflags
*10
$7
summary
$65
Extracts the key names and access flags for an arbitrary command.
$5
since
$5
7.0.0
$5
group
$6
server
$10
complexity
$54
O(N) where N is the number of arguments to the command
$9
arguments
*2
*6
$4
name
$7
command
$4
type
$6
string
$12
display_text
$7
command
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$12
command|list
*10
$7
summary
$32
Returns a list of command names.
$5
since
$5
7.0.0
$5
group
$6
server
$10
complexity
$50
O(N) where N is the total number of Redis commands
$9
arguments
*1
*10
$4
name
$8
filterby
$4
type
$5
oneof
$5
token
$8
FILTERBY
$5
flags
*1
+optional
$9
arguments
*3
*8
$4
name
$11
module-name
$4
type
$6
string
$12
display_text
$11
module-name
$5
token
$6
MODULE
*8
$4
name
$8
category
$4
type
$6
string
$12
display_text
$8
category
$5
token
$6
ACLCAT
*8
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$5
token
$7
PATTERN
$12
command|docs
*10
$7
summary
$68
Returns documentary information about one, multiple or all commands.
$5
since
$5
7.0.0
$5
group
$6
server
$10
complexity
$49
O(N) where N is the number of commands to look up
$9
arguments
*1
*8
$4
name
$12
command-name
$4
type
$6
string
$12
display_text
$12
command-name
$5
flags
*2
+optional
+multiple
$13
command|count
*8
$7
summary
$28
Returns a count of commands.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$4
O(1)
$6
config
*10
$7
summary
$46
A container for server configuration commands.
$5
since
$5
2.0.0
$5
group
$6
server
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*10
$16
config|resetstat
*8
$7
summary
$31
Resets the server's statistics.
$5
since
$5
2.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$11
config|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
5.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$14
config|rewrite
*8
$7
summary
$45
Persists the effective configuration to file.
$5
since
$5
2.8.0
$5
group
$6
server
$10
complexity
$4
O(1)
$10
config|get
*12
$7
summary
$57
Returns the effective values of configuration parameters.
$5
since
$5
2.0.0
$5
group
$6
server
$10
complexity
$62
O(N) when N is the number of configuration parameters provided
$7
history
*1
*2
$5
7.0.0
$65
Added the ability to pass multiple pattern parameters in one call
$9
arguments
*1
*8
$4
name
$9
parameter
$4
type
$6
string
$12
display_text
$9
parameter
$5
flags
*1
+multiple
$10
config|set
*12
$7
summary
$40
Sets configuration parameters in-flight.
$5
since
$5
2.0.0
$5
group
$6
server
$10
complexity
$62
O(N) when N is the number of configuration parameters provided
$7
history
*1
*2
$5
7.0.0
$57
Added the ability to set multiple parameters in one call.
$9
arguments
*1
*8
$4
name
$4
data
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*2
*6
$4
name
$9
parameter
$4
type
$6
string
$12
display_text
$9
parameter
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$5
hvals
*10
$7
summary
$29
Returns all values in a hash.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$37
O(N) where N is the size of the hash.
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$9
sismember
*10
$7
summary
$45
Determines whether a member belongs to a set.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
setnx
*16
$7
summary
$62
Set the string value of a key only when the key doesn't exist.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$6
2.6.12
$11
replaced_by
$28
`SET` with the `NX` argument
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$4
hdel
*12
$7
summary
$94
Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$51
O(N) where N is the number of fields to be removed.
$7
history
*1
*2
$5
2.4.0
$35
Accepts multiple `field` arguments.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
$5
flags
*1
+multiple
$6
asking
*8
$7
summary
$60
Signals that a cluster client is following an -ASK redirect.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$7
eval_ro
*10
$7
summary
$44
Executes a read-only server-side Lua script.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$39
Depends on the script that is executed.
$9
arguments
*4
*6
$4
name
$6
script
$4
type
$6
string
$12
display_text
$6
script
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*2
+optional
+multiple
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$8
bitcount
*12
$7
summary
$64
Counts the number of set bits (population counting) in a string.
$5
since
$5
2.6.0
$5
group
$6
bitmap
$10
complexity
$4
O(N)
$7
history
*1
*2
$5
7.0.0
$28
Added the `BYTE|BIT` option.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$5
range
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*3
*6
$4
name
$5
start
$4
type
$7
integer
$12
display_text
$5
start
*6
$4
name
$3
end
$4
type
$7
integer
$12
display_text
$3
end
*10
$4
name
$4
unit
$4
type
$5
oneof
$5
since
$5
7.0.0
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$4
byte
$4
type
$10
pure-token
$12
display_text
$4
byte
$5
token
$4
BYTE
*8
$4
name
$3
bit
$4
type
$10
pure-token
$12
display_text
$3
bit
$5
token
$3
BIT
$5
lmpop
*10
$7
summary
$107
Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.
$5
since
$5
7.0.0
$5
group
$4
list
$10
complexity
$87
O(N+M) where N is the number of provided keys and M is the number of elements returned.
$9
arguments
*4
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*6
$4
name
$5
where
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$4
left
$4
type
$10
pure-token
$12
display_text
$4
left
$5
token
$4
LEFT
*8
$4
name
$5
right
$4
type
$10
pure-token
$12
display_text
$5
right
$5
token
$5
RIGHT
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$4
hlen
*10
$7
summary
$39
Returns the number of fields in a hash.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$4
dump
*10
$7
summary
$65
Returns a serialized representation of the value stored at a key.
$5
since
$5
2.6.0
$5
group
$7
generic
$10
complexity
$244
O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$4
quit
*14
$7
summary
$22
Closes the connection.
$5
since
$5
1.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
7.2.0
$11
replaced_by
$27
just closing the connection
$4
lpop
*12
$7
summary
$104
Returns the first elements in a list after removing it. Deletes the list if the last element was popped.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$47
O(N) where N is the number of elements returned
$7
history
*1
*2
$5
6.2.0
$27
Added the `count` argument.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
since
$5
6.2.0
$5
flags
*1
+optional
$7
slowlog
*10
$7
summary
$34
A container for slow log commands.
$5
since
$6
2.2.12
$5
group
$6
server
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*8
$13
slowlog|reset
*8
$7
summary
$37
Clears all entries from the slow log.
$5
since
$6
2.2.12
$5
group
$6
server
$10
complexity
$52
O(N) where N is the number of entries in the slowlog
$12
slowlog|help
*8
$7
summary
$49
Show helpful text about the different subcommands
$5
since
$5
6.2.0
$5
group
$6
server
$10
complexity
$4
O(1)
$11
slowlog|len
*8
$7
summary
$46
Returns the number of entries in the slow log.
$5
since
$6
2.2.12
$5
group
$6
server
$10
complexity
$4
O(1)
$11
slowlog|get
*12
$7
summary
$31
Returns the slow log's entries.
$5
since
$6
2.2.12
$5
group
$6
server
$10
complexity
$46
O(N) where N is the number of entries returned
$7
history
*1
*2
$5
4.0.0
$52
Added client IP address, port and name to the reply.
$9
arguments
*1
*8
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
flags
*1
+optional
$4
time
*8
$7
summary
$24
Returns the server time.
$5
since
$5
2.6.0
$5
group
$6
server
$10
complexity
$4
O(1)
$4
mset
*10
$7
summary
$69
Atomically creates or modifies the string values of one or more keys.
$5
since
$5
1.0.1
$5
group
$6
string
$10
complexity
$42
O(N) where N is the number of keys to set.
$9
arguments
*1
*8
$4
name
$4
data
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$7
pfdebug
*12
$7
summary
$51
Internal commands for debugging HyperLogLog values.
$5
since
$5
2.8.9
$5
group
$11
hyperloglog
$10
complexity
$3
N/A
$9
doc_flags
*1
+syscmd
$9
arguments
*2
*6
$4
name
$10
subcommand
$4
type
$6
string
$12
display_text
$10
subcommand
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$7
linsert
*10
$7
summary
$61
Inserts an element before or after another element in a list.
$5
since
$5
2.2.0
$5
group
$4
list
$10
complexity
$232
O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
where
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$6
before
$4
type
$10
pure-token
$12
display_text
$6
before
$5
token
$6
BEFORE
*8
$4
name
$5
after
$4
type
$10
pure-token
$12
display_text
$5
after
$5
token
$5
AFTER
*6
$4
name
$5
pivot
$4
type
$6
string
$12
display_text
$5
pivot
*6
$4
name
$7
element
$4
type
$6
string
$12
display_text
$7
element
$6
getdel
*10
$7
summary
$57
Returns the string value of a key after deleting the key.
$5
since
$5
6.2.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$12
punsubscribe
*10
$7
summary
$82
Stops listening to messages published to channels that match one or more patterns.
$5
since
$5
2.0.0
$5
group
$6
pubsub
$10
complexity
$54
O(N) where N is the number of patterns to unsubscribe.
$9
arguments
*1
*8
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$5
flags
*2
+optional
+multiple
$12
georadius_ro
*18
$7
summary
$85
Returns members from a geospatial index that are within a distance from a coordinate.
$5
since
$6
3.2.10
$5
group
$3
geo
$10
complexity
$168
O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$40
`GEOSEARCH` with the `BYRADIUS` argument
$7
history
*1
*2
$5
6.2.0
$35
Added the `ANY` option for `COUNT`.
$9
arguments
*10
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$9
longitude
$4
type
$6
double
$12
display_text
$9
longitude
*6
$4
name
$8
latitude
$4
type
$6
double
$12
display_text
$8
latitude
*6
$4
name
$6
radius
$4
type
$6
double
$12
display_text
$6
radius
*6
$4
name
$4
unit
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$1
m
$4
type
$10
pure-token
$12
display_text
$1
m
$5
token
$1
M
*8
$4
name
$2
km
$4
type
$10
pure-token
$12
display_text
$2
km
$5
token
$2
KM
*8
$4
name
$2
ft
$4
type
$10
pure-token
$12
display_text
$2
ft
$5
token
$2
FT
*8
$4
name
$2
mi
$4
type
$10
pure-token
$12
display_text
$2
mi
$5
token
$2
MI
*10
$4
name
$9
withcoord
$4
type
$10
pure-token
$12
display_text
$9
withcoord
$5
token
$9
WITHCOORD
$5
flags
*1
+optional
*10
$4
name
$8
withdist
$4
type
$10
pure-token
$12
display_text
$8
withdist
$5
token
$8
WITHDIST
$5
flags
*1
+optional
*10
$4
name
$8
withhash
$4
type
$10
pure-token
$12
display_text
$8
withhash
$5
token
$8
WITHHASH
$5
flags
*1
+optional
*8
$4
name
$11
count-block
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
*12
$4
name
$3
any
$4
type
$10
pure-token
$12
display_text
$3
any
$5
token
$3
ANY
$5
since
$5
6.2.0
$5
flags
*1
+optional
*8
$4
name
$5
order
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$3
asc
$4
type
$10
pure-token
$12
display_text
$3
asc
$5
token
$3
ASC
*8
$4
name
$4
desc
$4
type
$10
pure-token
$12
display_text
$4
desc
$5
token
$4
DESC
$7
geohash
*10
$7
summary
$59
Returns members from a geospatial index as geohash strings.
$5
since
$5
3.2.0
$5
group
$3
geo
$10
complexity
$31
O(1) for each member requested.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
flags
*2
+optional
+multiple
$9
xrevrange
*12
$7
summary
$74
Returns the messages from a stream within a range of IDs in reverse order.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$152
O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).
$7
history
*1
*2
$5
6.2.0
$23
Added exclusive ranges.
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
end
$4
type
$6
string
$12
display_text
$3
end
*6
$4
name
$5
start
$4
type
$6
string
$12
display_text
$5
start
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$6
xgroup
*10
$7
summary
$41
A container for consumer groups commands.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*12
$14
xgroup|destroy
*10
$7
summary
$26
Destroys a consumer group.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$80
O(N) where N is the number of entries in the group's pending entries list (PEL).
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
$21
xgroup|createconsumer
*10
$7
summary
$39
Creates a consumer in a consumer group.
$5
since
$5
6.2.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
*6
$4
name
$8
consumer
$4
type
$6
string
$12
display_text
$8
consumer
$18
xgroup|delconsumer
*10
$7
summary
$41
Deletes a consumer from a consumer group.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
*6
$4
name
$8
consumer
$4
type
$6
string
$12
display_text
$8
consumer
$13
xgroup|create
*12
$7
summary
$25
Creates a consumer group.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.0.0
$40
Added the `entries_read` named argument.
$9
arguments
*5
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
*6
$4
name
$11
id-selector
$4
type
$5
oneof
$9
arguments
*2
*6
$4
name
$2
id
$4
type
$6
string
$12
display_text
$2
id
*8
$4
name
$6
new-id
$4
type
$10
pure-token
$12
display_text
$6
new-id
$5
token
$1
$
*10
$4
name
$8
mkstream
$4
type
$10
pure-token
$12
display_text
$8
mkstream
$5
token
$8
MKSTREAM
$5
flags
*1
+optional
*10
$4
name
$12
entries-read
$4
type
$7
integer
$12
display_text
$12
entries-read
$5
token
$11
ENTRIESREAD
$5
flags
*1
+optional
$11
xgroup|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$12
xgroup|setid
*12
$7
summary
$47
Sets the last-delivered ID of a consumer group.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.0.0
$43
Added the optional `entries_read` argument.
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
*6
$4
name
$11
id-selector
$4
type
$5
oneof
$9
arguments
*2
*6
$4
name
$2
id
$4
type
$6
string
$12
display_text
$2
id
*8
$4
name
$6
new-id
$4
type
$10
pure-token
$12
display_text
$6
new-id
$5
token
$1
$
*10
$4
name
$11
entriesread
$4
type
$7
integer
$12
display_text
$12
entries-read
$5
token
$11
ENTRIESREAD
$5
flags
*1
+optional
$6
zcount
*10
$7
summary
$77
Returns the count of members in a sorted set that have scores within a range.
$5
since
$5
2.0.0
$5
group
$10
sorted-set
$10
complexity
$64
O(log(N)) with N being the number of elements in the sorted set.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
min
$4
type
$6
double
$12
display_text
$3
min
*6
$4
name
$3
max
$4
type
$6
double
$12
display_text
$3
max
$6
substr
*16
$7
summary
$40
Returns a substring from a string value.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$231
O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
2.0.0
$11
replaced_by
$10
`GETRANGE`
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
start
$4
type
$7
integer
$12
display_text
$5
start
*6
$4
name
$3
end
$4
type
$7
integer
$12
display_text
$3
end
$7
zpopmin
*10
$7
summary
$127
Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
$5
since
$5
5.0.0
$5
group
$10
sorted-set
$10
complexity
$109
O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
flags
*1
+optional
$7
geodist
*10
$7
summary
$63
Returns the distance between two members of a geospatial index.
$5
since
$5
3.2.0
$5
group
$3
geo
$10
complexity
$4
O(1)
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$7
member1
$4
type
$6
string
$12
display_text
$7
member1
*6
$4
name
$7
member2
$4
type
$6
string
$12
display_text
$7
member2
*8
$4
name
$4
unit
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*4
*8
$4
name
$1
m
$4
type
$10
pure-token
$12
display_text
$1
m
$5
token
$1
M
*8
$4
name
$2
km
$4
type
$10
pure-token
$12
display_text
$2
km
$5
token
$2
KM
*8
$4
name
$2
ft
$4
type
$10
pure-token
$12
display_text
$2
ft
$5
token
$2
FT
*8
$4
name
$2
mi
$4
type
$10
pure-token
$12
display_text
$2
mi
$5
token
$2
MI
$5
zdiff
*10
$7
summary
$52
Returns the difference between multiple sorted sets.
$5
since
$5
6.2.0
$5
group
$10
sorted-set
$10
complexity
$155
O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
$9
arguments
*3
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*10
$4
name
$10
withscores
$4
type
$10
pure-token
$12
display_text
$10
withscores
$5
token
$10
WITHSCORES
$5
flags
*1
+optional
$4
srem
*12
$7
summary
$87
Removes one or more members from a set. Deletes the set if the last member was removed.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$52
O(N) where N is the number of members to be removed.
$7
history
*1
*2
$5
2.4.0
$36
Accepts multiple `member` arguments.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
flags
*1
+multiple
$4
sort
*10
$7
summary
$84
Sorts the elements in a list, a set, or a sorted set, optionally storing the result.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$168
O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).
$9
arguments
*7
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*12
$4
name
$10
by-pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$14
key_spec_index
:1
$5
token
$2
BY
$5
flags
*1
+optional
*10
$4
name
$5
limit
$4
type
$5
block
$5
token
$5
LIMIT
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
*12
$4
name
$11
get-pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$14
key_spec_index
:1
$5
token
$3
GET
$5
flags
*3
+optional
+multiple
+multiple_token
*8
$4
name
$5
order
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$3
asc
$4
type
$10
pure-token
$12
display_text
$3
asc
$5
token
$3
ASC
*8
$4
name
$4
desc
$4
type
$10
pure-token
$12
display_text
$4
desc
$5
token
$4
DESC
*10
$4
name
$7
sorting
$4
type
$10
pure-token
$12
display_text
$7
sorting
$5
token
$5
ALPHA
$5
flags
*1
+optional
*12
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:2
$5
token
$5
STORE
$5
flags
*1
+optional
$7
hincrby
*10
$7
summary
$114
Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$4
O(1)
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
*6
$4
name
$9
increment
$4
type
$7
integer
$12
display_text
$9
increment
$5
lmove
*10
$7
summary
$124
Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.
$5
since
$5
6.2.0
$5
group
$4
list
$10
complexity
$4
O(1)
$9
arguments
*4
*8
$4
name
$6
source
$4
type
$3
key
$12
display_text
$6
source
$14
key_spec_index
:0
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:1
*6
$4
name
$9
wherefrom
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$4
left
$4
type
$10
pure-token
$12
display_text
$4
left
$5
token
$4
LEFT
*8
$4
name
$5
right
$4
type
$10
pure-token
$12
display_text
$5
right
$5
token
$5
RIGHT
*6
$4
name
$7
whereto
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$4
left
$4
type
$10
pure-token
$12
display_text
$4
left
$5
token
$4
LEFT
*8
$4
name
$5
right
$4
type
$10
pure-token
$12
display_text
$5
right
$5
token
$5
RIGHT
$7
pfmerge
*10
$7
summary
$56
Merges one or more HyperLogLog values into a single key.
$5
since
$5
2.8.9
$5
group
$11
hyperloglog
$10
complexity
$59
O(N) to merge N HyperLogLogs, but with high constant times.
$9
arguments
*2
*8
$4
name
$7
destkey
$4
type
$3
key
$12
display_text
$7
destkey
$14
key_spec_index
:0
*10
$4
name
$9
sourcekey
$4
type
$3
key
$12
display_text
$9
sourcekey
$14
key_spec_index
:1
$5
flags
*2
+optional
+multiple
$8
getrange
*10
$7
summary
$50
Returns a substring of the string stored at a key.
$5
since
$5
2.4.0
$5
group
$6
string
$10
complexity
$231
O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
start
$4
type
$7
integer
$12
display_text
$5
start
*6
$4
name
$3
end
$4
type
$7
integer
$12
display_text
$3
end
$5
hscan
*10
$7
summary
$42
Iterates over fields and values of a hash.
$5
since
$5
2.8.0
$5
group
$4
hash
$10
complexity
$169
O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
cursor
$4
type
$7
integer
$12
display_text
$6
cursor
*10
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$5
token
$5
MATCH
$5
flags
*1
+optional
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$20
georadiusbymember_ro
*16
$7
summary
$81
Returns members from a geospatial index that are within a distance from a member.
$5
since
$6
3.2.10
$5
group
$3
geo
$10
complexity
$168
O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$58
`GEOSEARCH` with the `BYRADIUS` and `FROMMEMBER` arguments
$9
arguments
*9
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
*6
$4
name
$6
radius
$4
type
$6
double
$12
display_text
$6
radius
*6
$4
name
$4
unit
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$1
m
$4
type
$10
pure-token
$12
display_text
$1
m
$5
token
$1
M
*8
$4
name
$2
km
$4
type
$10
pure-token
$12
display_text
$2
km
$5
token
$2
KM
*8
$4
name
$2
ft
$4
type
$10
pure-token
$12
display_text
$2
ft
$5
token
$2
FT
*8
$4
name
$2
mi
$4
type
$10
pure-token
$12
display_text
$2
mi
$5
token
$2
MI
*10
$4
name
$9
withcoord
$4
type
$10
pure-token
$12
display_text
$9
withcoord
$5
token
$9
WITHCOORD
$5
flags
*1
+optional
*10
$4
name
$8
withdist
$4
type
$10
pure-token
$12
display_text
$8
withdist
$5
token
$8
WITHDIST
$5
flags
*1
+optional
*10
$4
name
$8
withhash
$4
type
$10
pure-token
$12
display_text
$8
withhash
$5
token
$8
WITHHASH
$5
flags
*1
+optional
*8
$4
name
$11
count-block
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
*10
$4
name
$3
any
$4
type
$10
pure-token
$12
display_text
$3
any
$5
token
$3
ANY
$5
flags
*1
+optional
*8
$4
name
$5
order
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$3
asc
$4
type
$10
pure-token
$12
display_text
$3
asc
$5
token
$3
ASC
*8
$4
name
$4
desc
$4
type
$10
pure-token
$12
display_text
$4
desc
$5
token
$4
DESC
$5
rpush
*12
$7
summary
$76
Appends one or more elements to a list. Creates the key if it doesn't exist.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$106
O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
$7
history
*1
*2
$5
2.4.0
$37
Accepts multiple `element` arguments.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$7
element
$4
type
$6
string
$12
display_text
$7
element
$5
flags
*1
+multiple
$11
zinterstore
*10
$7
summary
$54
Stores the intersect of multiple sorted sets in a key.
$5
since
$5
2.0.0
$5
group
$10
sorted-set
$10
complexity
$177
O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
$9
arguments
*5
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:0
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
flags
*1
+multiple
*10
$4
name
$6
weight
$4
type
$7
integer
$12
display_text
$6
weight
$5
token
$7
WEIGHTS
$5
flags
*2
+optional
+multiple
*10
$4
name
$9
aggregate
$4
type
$5
oneof
$5
token
$9
AGGREGATE
$5
flags
*1
+optional
$9
arguments
*3
*8
$4
name
$3
sum
$4
type
$10
pure-token
$12
display_text
$3
sum
$5
token
$3
SUM
*8
$4
name
$3
min
$4
type
$10
pure-token
$12
display_text
$3
min
$5
token
$3
MIN
*8
$4
name
$3
max
$4
type
$10
pure-token
$12
display_text
$3
max
$5
token
$3
MAX
$14
geosearchstore
*12
$7
summary
$105
Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result.
$5
since
$5
6.2.0
$5
group
$3
geo
$10
complexity
$169
O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape
$7
history
*1
*2
$5
7.0.0
$39
Added support for uppercase unit names.
$9
arguments
*7
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:0
*8
$4
name
$6
source
$4
type
$3
key
$12
display_text
$6
source
$14
key_spec_index
:1
*6
$4
name
$4
from
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
token
$10
FROMMEMBER
*8
$4
name
$10
fromlonlat
$4
type
$5
block
$5
token
$10
FROMLONLAT
$9
arguments
*2
*6
$4
name
$9
longitude
$4
type
$6
double
$12
display_text
$9
longitude
*6
$4
name
$8
latitude
$4
type
$6
double
$12
display_text
$8
latitude
*6
$4
name
$2
by
$4
type
$5
oneof
$9
arguments
*2
*6
$4
name
$6
circle
$4
type
$5
block
$9
arguments
*2
*8
$4
name
$6
radius
$4
type
$6
double
$12
display_text
$6
radius
$5
token
$8
BYRADIUS
*6
$4
name
$4
unit
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$1
m
$4
type
$10
pure-token
$12
display_text
$1
m
$5
token
$1
M
*8
$4
name
$2
km
$4
type
$10
pure-token
$12
display_text
$2
km
$5
token
$2
KM
*8
$4
name
$2
ft
$4
type
$10
pure-token
$12
display_text
$2
ft
$5
token
$2
FT
*8
$4
name
$2
mi
$4
type
$10
pure-token
$12
display_text
$2
mi
$5
token
$2
MI
*6
$4
name
$3
box
$4
type
$5
block
$9
arguments
*3
*8
$4
name
$5
width
$4
type
$6
double
$12
display_text
$5
width
$5
token
$5
BYBOX
*6
$4
name
$6
height
$4
type
$6
double
$12
display_text
$6
height
*6
$4
name
$4
unit
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$1
m
$4
type
$10
pure-token
$12
display_text
$1
m
$5
token
$1
M
*8
$4
name
$2
km
$4
type
$10
pure-token
$12
display_text
$2
km
$5
token
$2
KM
*8
$4
name
$2
ft
$4
type
$10
pure-token
$12
display_text
$2
ft
$5
token
$2
FT
*8
$4
name
$2
mi
$4
type
$10
pure-token
$12
display_text
$2
mi
$5
token
$2
MI
*8
$4
name
$5
order
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$3
asc
$4
type
$10
pure-token
$12
display_text
$3
asc
$5
token
$3
ASC
*8
$4
name
$4
desc
$4
type
$10
pure-token
$12
display_text
$4
desc
$5
token
$4
DESC
*8
$4
name
$11
count-block
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
*10
$4
name
$3
any
$4
type
$10
pure-token
$12
display_text
$3
any
$5
token
$3
ANY
$5
flags
*1
+optional
*10
$4
name
$9
storedist
$4
type
$10
pure-token
$12
display_text
$9
storedist
$5
token
$9
STOREDIST
$5
flags
*1
+optional
$5
xinfo
*10
$7
summary
$46
A container for stream introspection commands.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*8
$12
xinfo|stream
*12
$7
summary
$35
Returns information about a stream.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$7
history
*3
*2
$5
6.0.0
$26
Added the `FULL` modifier.
*2
$5
7.0.0
$109
Added the `max-deleted-entry-id`, `entries-added`, `recorded-first-entry-id`, `entries-read` and `lag` fields
*2
$5
7.2.0
$70
Added the `active-time` field, and changed the meaning of `seen-time`.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$10
full-block
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$4
full
$4
type
$10
pure-token
$12
display_text
$4
full
$5
token
$4
FULL
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
$10
xinfo|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$12
xinfo|groups
*12
$7
summary
$50
Returns a list of the consumer groups of a stream.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.0.0
$41
Added the `entries-read` and `lag` fields
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$15
xinfo|consumers
*12
$7
summary
$52
Returns a list of the consumers in a consumer group.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.2.0
$27
Added the `inactive` field.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
$7
publish
*10
$7
summary
$29
Posts a message to a channel.
$5
since
$5
2.0.0
$5
group
$6
pubsub
$10
complexity
$141
O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).
$9
arguments
*2
*6
$4
name
$7
channel
$4
type
$6
string
$12
display_text
$7
channel
*6
$4
name
$7
message
$4
type
$6
string
$12
display_text
$7
message
$5
bitop
*10
$7
summary
$71
Performs bitwise operations on multiple strings, and stores the result.
$5
since
$5
2.6.0
$5
group
$6
bitmap
$10
complexity
$4
O(N)
$9
arguments
*3
*6
$4
name
$9
operation
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$3
and
$4
type
$10
pure-token
$12
display_text
$3
and
$5
token
$3
AND
*8
$4
name
$2
or
$4
type
$10
pure-token
$12
display_text
$2
or
$5
token
$2
OR
*8
$4
name
$3
xor
$4
type
$10
pure-token
$12
display_text
$3
xor
$5
token
$3
XOR
*8
$4
name
$3
not
$4
type
$10
pure-token
$12
display_text
$3
not
$5
token
$3
NOT
*8
$4
name
$7
destkey
$4
type
$3
key
$12
display_text
$7
destkey
$14
key_spec_index
:0
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
flags
*1
+multiple
$6
getbit
*10
$7
summary
$30
Returns a bit value by offset.
$5
since
$5
2.2.0
$5
group
$6
bitmap
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
$7
latency
*10
$7
summary
$45
A container for latency diagnostics commands.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*14
$17
latency|histogram
*10
$7
summary
$77
Returns the cumulative distribution of latencies of a subset or all commands.
$5
since
$5
7.0.0
$5
group
$6
server
$10
complexity
$80
O(N) where N is the number of commands with latency information being retrieved.
$9
arguments
*1
*8
$4
name
$7
command
$4
type
$6
string
$12
display_text
$7
command
$5
flags
*2
+optional
+multiple
$13
latency|reset
*10
$7
summary
$47
Resets the latency data for one or more events.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$5
event
$4
type
$6
string
$12
display_text
$5
event
$5
flags
*2
+optional
+multiple
$12
latency|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$4
O(1)
$15
latency|history
*10
$7
summary
$47
Returns timestamp-latency samples for an event.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$5
event
$4
type
$6
string
$12
display_text
$5
event
$14
latency|latest
*8
$7
summary
$50
Returns the latest latency samples for all events.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$4
O(1)
$13
latency|graph
*10
$7
summary
$37
Returns a latency graph for an event.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$5
event
$4
type
$6
string
$12
display_text
$5
event
$14
latency|doctor
*8
$7
summary
$49
Returns a human-readable latency analysis report.
$5
since
$6
2.8.13
$5
group
$6
server
$10
complexity
$4
O(1)
$4
zrem
*12
$7
summary
$98
Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.
$5
since
$5
1.2.0
$5
group
$10
sorted-set
$10
complexity
$109
O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.
$7
history
*1
*2
$5
2.4.0
$26
Accepts multiple elements.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
flags
*1
+multiple
$4
type
*10
$7
summary
$45
Determines the type of value stored at a key.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
fcall
*10
$7
summary
$19
Invokes a function.
$5
since
$5
7.0.0
$5
group
$9
scripting
$10
complexity
$41
Depends on the function that is executed.
$9
arguments
*4
*6
$4
name
$8
function
$4
type
$6
string
$12
display_text
$8
function
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*2
+optional
+multiple
*8
$4
name
$3
arg
$4
type
$6
string
$12
display_text
$3
arg
$5
flags
*2
+optional
+multiple
$7
hgetall
*10
$7
summary
$40
Returns all fields and values in a hash.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$37
O(N) where N is the size of the hash.
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$4
ping
*10
$7
summary
$41
Returns the server's liveliness response.
$5
since
$5
1.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$7
message
$4
type
$6
string
$12
display_text
$7
message
$5
flags
*1
+optional
$6
rename
*10
$7
summary
$45
Renames a key and overwrites the destination.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$6
newkey
$4
type
$3
key
$12
display_text
$6
newkey
$14
key_spec_index
:1
$6
swapdb
*10
$7
summary
$26
Swaps two Redis databases.
$5
since
$5
4.0.0
$5
group
$6
server
$10
complexity
$86
O(N) where N is the count of clients watching or blocking on keys from both databases.
$9
arguments
*2
*6
$4
name
$6
index1
$4
type
$7
integer
$12
display_text
$6
index1
*6
$4
name
$6
index2
$4
type
$7
integer
$12
display_text
$6
index2
$6
lpushx
*12
$7
summary
$66
Prepends one or more elements to a list only when the list exists.
$5
since
$5
2.2.0
$5
group
$4
list
$10
complexity
$106
O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
$7
history
*1
*2
$5
4.0.0
$37
Accepts multiple `element` arguments.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$7
element
$4
type
$6
string
$12
display_text
$7
element
$5
flags
*1
+multiple
$8
renamenx
*12
$7
summary
$58
Renames a key only when the target key name doesn't exist.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
3.2.0
$86
The command no longer returns an error when source and destination names are the same.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$6
newkey
$4
type
$3
key
$12
display_text
$6
newkey
$14
key_spec_index
:1
$10
zintercard
*10
$7
summary
$71
Returns the number of members of the intersect of multiple sorted sets.
$5
since
$5
7.0.0
$5
group
$10
sorted-set
$10
complexity
$102
O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.
$9
arguments
*3
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*10
$4
name
$5
limit
$4
type
$7
integer
$12
display_text
$5
limit
$5
token
$5
LIMIT
$5
flags
*1
+optional
$6
client
*10
$7
summary
$43
A container for client connection commands.
$5
since
$5
2.4.0
$5
group
$10
connection
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*36
$14
client|setinfo
*10
$7
summary
$54
Sets information specific to the client or connection.
$5
since
$5
7.2.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$4
attr
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$7
libname
$4
type
$6
string
$12
display_text
$7
libname
$5
token
$8
LIB-NAME
*8
$4
name
$6
libver
$4
type
$6
string
$12
display_text
$6
libver
$5
token
$7
LIB-VER
$15
client|no-evict
*10
$7
summary
$48
Sets the client eviction mode of the connection.
$5
since
$5
7.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$7
enabled
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$2
on
$4
type
$10
pure-token
$12
display_text
$2
on
$5
token
$2
ON
*8
$4
name
$3
off
$4
type
$10
pure-token
$12
display_text
$3
off
$5
token
$3
OFF
$12
client|reply
*10
$7
summary
$50
Instructs the server whether to reply to commands.
$5
since
$5
3.2.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$6
action
$4
type
$5
oneof
$9
arguments
*3
*8
$4
name
$2
on
$4
type
$10
pure-token
$12
display_text
$2
on
$5
token
$2
ON
*8
$4
name
$3
off
$4
type
$10
pure-token
$12
display_text
$3
off
$5
token
$3
OFF
*8
$4
name
$4
skip
$4
type
$10
pure-token
$12
display_text
$4
skip
$5
token
$4
SKIP
$14
client|caching
*10
$7
summary
$67
Instructs the server whether to track the keys in the next request.
$5
since
$5
6.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$4
mode
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$3
yes
$4
type
$10
pure-token
$12
display_text
$3
yes
$5
token
$3
YES
*8
$4
name
$2
no
$4
type
$10
pure-token
$12
display_text
$2
no
$5
token
$2
NO
$19
client|trackinginfo
*8
$7
summary
$81
Returns information about server-assisted client-side caching for the connection.
$5
since
$5
6.2.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$14
client|getname
*8
$7
summary
$35
Returns the name of the connection.
$5
since
$5
2.6.9
$5
group
$10
connection
$10
complexity
$4
O(1)
$15
client|no-touch
*10
$7
summary
$81
Controls whether commands sent by the client affect the LRU/LFU of accessed keys.
$5
since
$5
7.2.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$7
enabled
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$2
on
$4
type
$10
pure-token
$12
display_text
$2
on
$5
token
$2
ON
*8
$4
name
$3
off
$4
type
$10
pure-token
$12
display_text
$3
off
$5
token
$3
OFF
$14
client|setname
*10
$7
summary
$25
Sets the connection name.
$5
since
$5
2.6.9
$5
group
$10
connection
$10
complexity
$4
O(1)
$9
arguments
*1
*6
$4
name
$15
connection-name
$4
type
$6
string
$12
display_text
$15
connection-name
$11
client|kill
*12
$7
summary
$28
Terminates open connections.
$5
since
$5
2.4.0
$5
group
$10
connection
$10
complexity
$48
O(N) where N is the number of client connections
$7
history
*5
*2
$6
2.8.12
$24
Added new filter format.
*2
$6
2.8.12
$12
`ID` option.
*2
$5
3.2.0
$41
Added `master` type in for `TYPE` option.
*2
$5
5.0.0
$91
Replaced `slave` `TYPE` with `replica`. `slave` still supported for backward compatibility.
*2
$5
6.2.0
$15
`LADDR` option.
$9
arguments
*1
*6
$4
name
$6
filter
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$10
old-format
$4
type
$6
string
$12
display_text
$7
ip:port
$16
deprecated_since
$6
2.8.12
*8
$4
name
$10
new-format
$4
type
$5
oneof
$5
flags
*1
+multiple
$9
arguments
*6
*12
$4
name
$9
client-id
$4
type
$7
integer
$12
display_text
$9
client-id
$5
token
$2
ID
$5
since
$6
2.8.12
$5
flags
*1
+optional
*12
$4
name
$11
client-type
$4
type
$5
oneof
$5
token
$4
TYPE
$5
since
$6
2.8.12
$5
flags
*1
+optional
$9
arguments
*5
*8
$4
name
$6
normal
$4
type
$10
pure-token
$12
display_text
$6
normal
$5
token
$6
NORMAL
*10
$4
name
$6
master
$4
type
$10
pure-token
$12
display_text
$6
master
$5
token
$6
MASTER
$5
since
$5
3.2.0
*8
$4
name
$5
slave
$4
type
$10
pure-token
$12
display_text
$5
slave
$5
token
$5
SLAVE
*10
$4
name
$7
replica
$4
type
$10
pure-token
$12
display_text
$7
replica
$5
token
$7
REPLICA
$5
since
$5
5.0.0
*8
$4
name
$6
pubsub
$4
type
$10
pure-token
$12
display_text
$6
pubsub
$5
token
$6
PUBSUB
*10
$4
name
$8
username
$4
type
$6
string
$12
display_text
$8
username
$5
token
$4
USER
$5
flags
*1
+optional
*10
$4
name
$4
addr
$4
type
$6
string
$12
display_text
$7
ip:port
$5
token
$4
ADDR
$5
flags
*1
+optional
*12
$4
name
$5
laddr
$4
type
$6
string
$12
display_text
$7
ip:port
$5
token
$5
LADDR
$5
since
$5
6.2.0
$5
flags
*1
+optional
*10
$4
name
$6
skipme
$4
type
$5
oneof
$5
token
$6
SKIPME
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$3
yes
$4
type
$10
pure-token
$12
display_text
$3
yes
$5
token
$3
YES
*8
$4
name
$2
no
$4
type
$10
pure-token
$12
display_text
$2
no
$5
token
$2
NO
$15
client|tracking
*10
$7
summary
$64
Controls server-assisted client-side caching for the connection.
$5
since
$5
6.0.0
$5
group
$10
connection
$10
complexity
$55
O(1). Some options may introduce additional complexity.
$9
arguments
*7
*6
$4
name
$6
status
$4
type
$5
oneof
$9
arguments
*2
*8
$4
name
$2
on
$4
type
$10
pure-token
$12
display_text
$2
on
$5
token
$2
ON
*8
$4
name
$3
off
$4
type
$10
pure-token
$12
display_text
$3
off
$5
token
$3
OFF
*10
$4
name
$9
client-id
$4
type
$7
integer
$12
display_text
$9
client-id
$5
token
$8
REDIRECT
$5
flags
*1
+optional
*10
$4
name
$6
prefix
$4
type
$6
string
$12
display_text
$6
prefix
$5
token
$6
PREFIX
$5
flags
*3
+optional
+multiple
+multiple_token
*10
$4
name
$5
bcast
$4
type
$10
pure-token
$12
display_text
$5
bcast
$5
token
$5
BCAST
$5
flags
*1
+optional
*10
$4
name
$5
optin
$4
type
$10
pure-token
$12
display_text
$5
optin
$5
token
$5
OPTIN
$5
flags
*1
+optional
*10
$4
name
$6
optout
$4
type
$10
pure-token
$12
display_text
$6
optout
$5
token
$6
OPTOUT
$5
flags
*1
+optional
*10
$4
name
$6
noloop
$4
type
$10
pure-token
$12
display_text
$6
noloop
$5
token
$6
NOLOOP
$5
flags
*1
+optional
$9
client|id
*8
$7
summary
$47
Returns the unique client ID of the connection.
$5
since
$5
5.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$11
client|list
*12
$7
summary
$23
Lists open connections.
$5
since
$5
2.4.0
$5
group
$10
connection
$10
complexity
$48
O(N) where N is the number of client connections
$7
history
*6
*2
$6
2.8.12
$31
Added unique client `id` field.
*2
$5
5.0.0
$29
Added optional `TYPE` filter.
*2
$5
6.0.0
$19
Added `user` field.
*2
$5
6.2.0
$85
Added `argv-mem`, `tot-mem`, `laddr` and `redir` fields and the optional `ID` filter.
*2
$5
7.0.0
$50
Added `resp`, `multi-mem`, `rbs` and `rbp` fields.
*2
$5
7.0.3
$19
Added `ssub` field.
$9
arguments
*2
*12
$4
name
$11
client-type
$4
type
$5
oneof
$5
token
$4
TYPE
$5
since
$5
5.0.0
$5
flags
*1
+optional
$9
arguments
*4
*8
$4
name
$6
normal
$4
type
$10
pure-token
$12
display_text
$6
normal
$5
token
$6
NORMAL
*8
$4
name
$6
master
$4
type
$10
pure-token
$12
display_text
$6
master
$5
token
$6
MASTER
*8
$4
name
$7
replica
$4
type
$10
pure-token
$12
display_text
$7
replica
$5
token
$7
REPLICA
*8
$4
name
$6
pubsub
$4
type
$10
pure-token
$12
display_text
$6
pubsub
$5
token
$6
PUBSUB
*12
$4
name
$9
client-id
$4
type
$7
integer
$12
display_text
$9
client-id
$5
token
$2
ID
$5
since
$5
6.2.0
$5
flags
*2
+optional
+multiple
$12
client|pause
*12
$7
summary
$29
Suspends commands processing.
$5
since
$5
3.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
6.2.0
$61
`CLIENT PAUSE WRITE` mode added along with the `mode` option.
$9
arguments
*2
*6
$4
name
$7
timeout
$4
type
$7
integer
$12
display_text
$7
timeout
*10
$4
name
$4
mode
$4
type
$5
oneof
$5
since
$5
6.2.0
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
write
$4
type
$10
pure-token
$12
display_text
$5
write
$5
token
$5
WRITE
*8
$4
name
$3
all
$4
type
$10
pure-token
$12
display_text
$3
all
$5
token
$3
ALL
$15
client|getredir
*8
$7
summary
$86
Returns the client ID to which the connection's tracking notifications are redirected.
$5
since
$5
6.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$11
client|info
*8
$7
summary
$41
Returns information about the connection.
$5
since
$5
6.2.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$11
client|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
5.0.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$14
client|unblock
*10
$7
summary
$76
Unblocks a client blocked by a blocking command from a different connection.
$5
since
$5
5.0.0
$5
group
$10
connection
$10
complexity
$52
O(log N) where N is the number of client connections
$9
arguments
*2
*6
$4
name
$9
client-id
$4
type
$7
integer
$12
display_text
$9
client-id
*8
$4
name
$12
unblock-type
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$7
timeout
$4
type
$10
pure-token
$12
display_text
$7
timeout
$5
token
$7
TIMEOUT
*8
$4
name
$5
error
$4
type
$10
pure-token
$12
display_text
$5
error
$5
token
$5
ERROR
$14
client|unpause
*8
$7
summary
$48
Resumes processing commands from paused clients.
$5
since
$5
6.2.0
$5
group
$10
connection
$10
complexity
$44
O(N) Where N is the number of paused clients
$4
exec
*8
$7
summary
$39
Executes all commands in a transaction.
$5
since
$5
1.2.0
$5
group
$12
transactions
$10
complexity
$38
Depends on commands in the transaction
$8
zrevrank
*12
$7
summary
$75
Returns the index of a member in a sorted set ordered by descending scores.
$5
since
$5
2.0.0
$5
group
$10
sorted-set
$10
complexity
$9
O(log(N))
$7
history
*1
*2
$5
7.2.0
$40
Added the optional `WITHSCORE` argument.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
*10
$4
name
$9
withscore
$4
type
$10
pure-token
$12
display_text
$9
withscore
$5
token
$9
WITHSCORE
$5
flags
*1
+optional
$10
sdiffstore
*10
$7
summary
$48
Stores the difference of multiple sets in a key.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$63
O(N) where N is the total number of elements in all given sets.
$9
arguments
*2
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:0
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
flags
*1
+multiple
$9
georadius
*18
$7
summary
$105
Queries a geospatial index for members within a distance from a coordinate, optionally stores the result.
$5
since
$5
3.2.0
$5
group
$3
geo
$10
complexity
$168
O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$61
`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` argument
$7
history
*2
*2
$5
6.2.0
$35
Added the `ANY` option for `COUNT`.
*2
$5
7.0.0
$39
Added support for uppercase unit names.
$9
arguments
*11
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$9
longitude
$4
type
$6
double
$12
display_text
$9
longitude
*6
$4
name
$8
latitude
$4
type
$6
double
$12
display_text
$8
latitude
*6
$4
name
$6
radius
$4
type
$6
double
$12
display_text
$6
radius
*6
$4
name
$4
unit
$4
type
$5
oneof
$9
arguments
*4
*8
$4
name
$1
m
$4
type
$10
pure-token
$12
display_text
$1
m
$5
token
$1
M
*8
$4
name
$2
km
$4
type
$10
pure-token
$12
display_text
$2
km
$5
token
$2
KM
*8
$4
name
$2
ft
$4
type
$10
pure-token
$12
display_text
$2
ft
$5
token
$2
FT
*8
$4
name
$2
mi
$4
type
$10
pure-token
$12
display_text
$2
mi
$5
token
$2
MI
*10
$4
name
$9
withcoord
$4
type
$10
pure-token
$12
display_text
$9
withcoord
$5
token
$9
WITHCOORD
$5
flags
*1
+optional
*10
$4
name
$8
withdist
$4
type
$10
pure-token
$12
display_text
$8
withdist
$5
token
$8
WITHDIST
$5
flags
*1
+optional
*10
$4
name
$8
withhash
$4
type
$10
pure-token
$12
display_text
$8
withhash
$5
token
$8
WITHHASH
$5
flags
*1
+optional
*8
$4
name
$11
count-block
$4
type
$5
block
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
*12
$4
name
$3
any
$4
type
$10
pure-token
$12
display_text
$3
any
$5
token
$3
ANY
$5
since
$5
6.2.0
$5
flags
*1
+optional
*8
$4
name
$5
order
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$3
asc
$4
type
$10
pure-token
$12
display_text
$3
asc
$5
token
$3
ASC
*8
$4
name
$4
desc
$4
type
$10
pure-token
$12
display_text
$4
desc
$5
token
$4
DESC
*8
$4
name
$5
store
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*10
$4
name
$8
storekey
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
token
$5
STORE
*10
$4
name
$12
storedistkey
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:2
$5
token
$9
STOREDIST
$6
setbit
*10
$7
summary
$90
Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist.
$5
since
$5
2.2.0
$5
group
$6
bitmap
$10
complexity
$4
O(1)
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
value
$4
type
$7
integer
$12
display_text
$5
value
$10
psubscribe
*10
$7
summary
$75
Listens for messages published to channels that match one or more patterns.
$5
since
$5
2.0.0
$5
group
$6
pubsub
$10
complexity
$55
O(N) where N is the number of patterns to subscribe to.
$9
arguments
*1
*8
$4
name
$7
pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$5
flags
*1
+multiple
$5
blpop
*12
$7
summary
$145
Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.
$5
since
$5
2.0.0
$5
group
$4
list
$10
complexity
$44
O(N) where N is the number of provided keys.
$7
history
*1
*2
$5
6.0.0
$59
`timeout` is interpreted as a double instead of an integer.
$9
arguments
*2
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*6
$4
name
$7
timeout
$4
type
$6
double
$12
display_text
$7
timeout
$5
smove
*10
$7
summary
$39
Moves a member from one set to another.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$4
O(1)
$9
arguments
*3
*8
$4
name
$6
source
$4
type
$3
key
$12
display_text
$6
source
$14
key_spec_index
:0
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:1
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$14
zremrangebylex
*10
$7
summary
$115
Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.
$5
since
$5
2.8.9
$5
group
$10
sorted-set
$10
complexity
$120
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
min
$4
type
$6
string
$12
display_text
$3
min
*6
$4
name
$3
max
$4
type
$6
string
$12
display_text
$3
max
$10
xreadgroup
*10
$7
summary
$122
Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$321
For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.
$9
arguments
*5
*8
$4
name
$11
group-block
$4
type
$5
block
$5
token
$5
GROUP
$9
arguments
*2
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
*6
$4
name
$8
consumer
$4
type
$6
string
$12
display_text
$8
consumer
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
*10
$4
name
$12
milliseconds
$4
type
$7
integer
$12
display_text
$12
milliseconds
$5
token
$5
BLOCK
$5
flags
*1
+optional
*10
$4
name
$5
noack
$4
type
$10
pure-token
$12
display_text
$5
noack
$5
token
$5
NOACK
$5
flags
*1
+optional
*8
$4
name
$7
streams
$4
type
$5
block
$5
token
$7
STREAMS
$9
arguments
*2
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*8
$4
name
$2
id
$4
type
$6
string
$12
display_text
$2
id
$5
flags
*1
+multiple
$12
hincrbyfloat
*10
$7
summary
$111
Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.
$5
since
$5
2.6.0
$5
group
$4
hash
$10
complexity
$4
O(1)
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
*6
$4
name
$9
increment
$4
type
$6
double
$12
display_text
$9
increment
$10
xautoclaim
*12
$7
summary
$127
Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member.
$5
since
$5
6.2.0
$5
group
$6
stream
$10
complexity
$23
O(1) if COUNT is small.
$7
history
*1
*2
$5
7.0.0
$96
Added an element to the reply array, containing deleted entries the command cleared from the PEL
$9
arguments
*7
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
group
$4
type
$6
string
$12
display_text
$5
group
*6
$4
name
$8
consumer
$4
type
$6
string
$12
display_text
$8
consumer
*6
$4
name
$13
min-idle-time
$4
type
$6
string
$12
display_text
$13
min-idle-time
*6
$4
name
$5
start
$4
type
$6
string
$12
display_text
$5
start
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
*10
$4
name
$6
justid
$4
type
$10
pure-token
$12
display_text
$6
justid
$5
token
$6
JUSTID
$5
flags
*1
+optional
$5
reset
*8
$7
summary
$22
Resets the connection.
$5
since
$5
6.2.0
$5
group
$10
connection
$10
complexity
$4
O(1)
$6
object
*10
$7
summary
$46
A container for object introspection commands.
$5
since
$5
2.2.3
$5
group
$7
generic
$10
complexity
$22
Depends on subcommand.
$11
subcommands
*10
$11
object|help
*8
$7
summary
$53
Returns helpful text about the different subcommands.
$5
since
$5
6.2.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$15
object|idletime
*10
$7
summary
$57
Returns the time since the last access to a Redis object.
$5
since
$5
2.2.3
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$11
object|freq
*10
$7
summary
$67
Returns the logarithmic access frequency counter of a Redis object.
$5
since
$5
4.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$15
object|encoding
*10
$7
summary
$48
Returns the internal encoding of a Redis object.
$5
since
$5
2.2.3
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$15
object|refcount
*10
$7
summary
$48
Returns the reference count of a value of a key.
$5
since
$5
2.2.3
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$4
sadd
*12
$7
summary
$71
Adds one or more members to a set. Creates the key if it doesn't exist.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$106
O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
$7
history
*1
*2
$5
2.4.0
$36
Accepts multiple `member` arguments.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
flags
*1
+multiple
$5
watch
*10
$7
summary
$69
Monitors changes to keys to determine the execution of a transaction.
$5
since
$5
2.2.0
$5
group
$12
transactions
$10
complexity
$19
O(1) for every key.
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$4
rpop
*12
$7
summary
$97
Returns and removes the last elements of a list. Deletes the list if the last element was popped.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$47
O(N) where N is the number of elements returned
$7
history
*1
*2
$5
6.2.0
$27
Added the `count` argument.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
since
$5
6.2.0
$5
flags
*1
+optional
$4
spop
*12
$7
summary
$113
Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$89
Without the count argument O(1), otherwise O(N) where N is the value of the passed count.
$7
history
*1
*2
$5
3.2.0
$27
Added the `count` argument.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
since
$5
3.2.0
$5
flags
*1
+optional
$8
smembers
*10
$7
summary
$29
Returns all members of a set.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$36
O(N) where N is the set cardinality.
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$7
hexists
*10
$7
summary
$44
Determines whether a field exists in a hash.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
$6
geopos
*10
$7
summary
$70
Returns the longitude and latitude of members from a geospatial index.
$5
since
$5
3.2.0
$5
group
$3
geo
$10
complexity
$31
O(1) for each member requested.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
flags
*2
+optional
+multiple
$5
xread
*8
$7
summary
$127
Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.
$5
since
$5
5.0.0
$5
group
$6
stream
$9
arguments
*3
*10
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$5
token
$5
COUNT
$5
flags
*1
+optional
*10
$4
name
$12
milliseconds
$4
type
$7
integer
$12
display_text
$12
milliseconds
$5
token
$5
BLOCK
$5
flags
*1
+optional
*8
$4
name
$7
streams
$4
type
$5
block
$5
token
$7
STREAMS
$9
arguments
*2
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*8
$4
name
$2
id
$4
type
$6
string
$12
display_text
$2
id
$5
flags
*1
+multiple
$5
pfadd
*10
$7
summary
$72
Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.
$5
since
$5
2.8.9
$5
group
$11
hyperloglog
$10
complexity
$26
O(1) to add every element.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$7
element
$4
type
$6
string
$12
display_text
$7
element
$5
flags
*2
+optional
+multiple
$4
lpos
*10
$7
summary
$49
Returns the index of matching elements in a list.
$5
since
$5
6.0.6
$5
group
$4
list
$10
complexity
$217
O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.
$9
arguments
*5
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$7
element
$4
type
$6
string
$12
display_text
$7
element
*10
$4
name
$4
rank
$4
type
$7
integer
$12
display_text
$4
rank
$5
token
$4
RANK
$5
flags
*1
+optional
*10
$4
name
$11
num-matches
$4
type
$7
integer
$12
display_text
$11
num-matches
$5
token
$5
COUNT
$5
flags
*1
+optional
*10
$4
name
$3
len
$4
type
$7
integer
$12
display_text
$3
len
$5
token
$6
MAXLEN
$5
flags
*1
+optional
$7
sort_ro
*10
$7
summary
$62
Returns the sorted elements of a list, a set, or a sorted set.
$5
since
$5
7.0.0
$5
group
$7
generic
$10
complexity
$168
O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).
$9
arguments
*6
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*12
$4
name
$10
by-pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$14
key_spec_index
:1
$5
token
$2
BY
$5
flags
*1
+optional
*10
$4
name
$5
limit
$4
type
$5
block
$5
token
$5
LIMIT
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
*12
$4
name
$11
get-pattern
$4
type
$7
pattern
$12
display_text
$7
pattern
$14
key_spec_index
:1
$5
token
$3
GET
$5
flags
*3
+optional
+multiple
+multiple_token
*8
$4
name
$5
order
$4
type
$5
oneof
$5
flags
*1
+optional
$9
arguments
*2
*8
$4
name
$3
asc
$4
type
$10
pure-token
$12
display_text
$3
asc
$5
token
$3
ASC
*8
$4
name
$4
desc
$4
type
$10
pure-token
$12
display_text
$4
desc
$5
token
$4
DESC
*10
$4
name
$7
sorting
$4
type
$10
pure-token
$12
display_text
$7
sorting
$5
token
$5
ALPHA
$5
flags
*1
+optional
$8
bzpopmax
*12
$7
summary
$182
Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.
$5
since
$5
5.0.0
$5
group
$10
sorted-set
$10
complexity
$64
O(log(N)) with N being the number of elements in the sorted set.
$7
history
*1
*2
$5
6.0.0
$59
`timeout` is interpreted as a double instead of an integer.
$9
arguments
*2
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*6
$4
name
$7
timeout
$4
type
$6
double
$12
display_text
$7
timeout
$6
sinter
*10
$7
summary
$39
Returns the intersect of multiple sets.
$5
since
$5
1.0.0
$5
group
$3
set
$10
complexity
$93
O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$6
zunion
*10
$7
summary
$42
Returns the union of multiple sorted sets.
$5
since
$5
6.2.0
$5
group
$10
sorted-set
$10
complexity
$140
O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
$9
arguments
*5
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*10
$4
name
$6
weight
$4
type
$7
integer
$12
display_text
$6
weight
$5
token
$7
WEIGHTS
$5
flags
*2
+optional
+multiple
*10
$4
name
$9
aggregate
$4
type
$5
oneof
$5
token
$9
AGGREGATE
$5
flags
*1
+optional
$9
arguments
*3
*8
$4
name
$3
sum
$4
type
$10
pure-token
$12
display_text
$3
sum
$5
token
$3
SUM
*8
$4
name
$3
min
$4
type
$10
pure-token
$12
display_text
$3
min
$5
token
$3
MIN
*8
$4
name
$3
max
$4
type
$10
pure-token
$12
display_text
$3
max
$5
token
$3
MAX
*10
$4
name
$10
withscores
$4
type
$10
pure-token
$12
display_text
$10
withscores
$5
token
$10
WITHSCORES
$5
flags
*1
+optional
$10
brpoplpush
*18
$7
summary
$166
Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.
$5
since
$5
2.2.0
$5
group
$4
list
$10
complexity
$4
O(1)
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$46
`BLMOVE` with the `RIGHT` and `LEFT` arguments
$7
history
*1
*2
$5
6.0.0
$59
`timeout` is interpreted as a double instead of an integer.
$9
arguments
*3
*8
$4
name
$6
source
$4
type
$3
key
$12
display_text
$6
source
$14
key_spec_index
:0
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:1
*6
$4
name
$7
timeout
$4
type
$6
double
$12
display_text
$7
timeout
$7
zincrby
*10
$7
summary
$49
Increments the score of a member in a sorted set.
$5
since
$5
1.2.0
$5
group
$10
sorted-set
$10
complexity
$62
O(log(N)) where N is the number of elements in the sorted set.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$9
increment
$4
type
$7
integer
$12
display_text
$9
increment
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$7
zmscore
*10
$7
summary
$57
Returns the score of one or more members in a sorted set.
$5
since
$5
6.2.0
$5
group
$10
sorted-set
$10
complexity
$54
O(N) where N is the number of members being requested.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$5
flags
*1
+multiple
$6
xsetid
*12
$7
summary
$50
An internal command for replicating stream values.
$5
since
$5
5.0.0
$5
group
$6
stream
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.0.0
$63
Added the `entries_added` and `max_deleted_entry_id` arguments.
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$7
last-id
$4
type
$6
string
$12
display_text
$7
last-id
*12
$4
name
$13
entries-added
$4
type
$7
integer
$12
display_text
$13
entries-added
$5
token
$12
ENTRIESADDED
$5
since
$5
7.0.0
$5
flags
*1
+optional
*12
$4
name
$14
max-deleted-id
$4
type
$6
string
$12
display_text
$14
max-deleted-id
$5
token
$12
MAXDELETEDID
$5
since
$5
7.0.0
$5
flags
*1
+optional
$6
incrby
*10
$7
summary
$100
Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$9
increment
$4
type
$7
integer
$12
display_text
$9
increment
$9
randomkey
*8
$7
summary
$44
Returns a random key name from the database.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$6
zscore
*10
$7
summary
$46
Returns the score of a member in a sorted set.
$5
since
$5
1.2.0
$5
group
$10
sorted-set
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$6
member
$4
type
$6
string
$12
display_text
$6
member
$15
zremrangebyrank
*10
$7
summary
$110
Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.
$5
since
$5
2.0.0
$5
group
$10
sorted-set
$10
complexity
$120
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
start
$4
type
$7
integer
$12
display_text
$5
start
*6
$4
name
$4
stop
$4
type
$7
integer
$12
display_text
$4
stop
$5
hkeys
*10
$7
summary
$29
Returns all fields in a hash.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$37
O(N) where N is the size of the hash.
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$11
zrangebylex
*16
$7
summary
$63
Returns members in a sorted set within a lexicographical range.
$5
since
$5
2.8.9
$5
group
$10
sorted-set
$10
complexity
$217
O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
6.2.0
$11
replaced_by
$34
`ZRANGE` with the `BYLEX` argument
$9
arguments
*4
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
min
$4
type
$6
string
$12
display_text
$3
min
*6
$4
name
$3
max
$4
type
$6
string
$12
display_text
$3
max
*10
$4
name
$5
limit
$4
type
$5
block
$5
token
$5
LIMIT
$5
flags
*1
+optional
$9
arguments
*2
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
*6
$4
name
$5
count
$4
type
$7
integer
$12
display_text
$5
count
$9
subscribe
*10
$7
summary
$43
Listens for messages published to channels.
$5
since
$5
2.0.0
$5
group
$6
pubsub
$10
complexity
$55
O(N) where N is the number of channels to subscribe to.
$9
arguments
*1
*8
$4
name
$7
channel
$4
type
$6
string
$12
display_text
$7
channel
$5
flags
*1
+multiple
$6
zinter
*10
$7
summary
$46
Returns the intersect of multiple sorted sets.
$5
since
$5
6.2.0
$5
group
$10
sorted-set
$10
complexity
$177
O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
$9
arguments
*5
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*10
$4
name
$6
weight
$4
type
$7
integer
$12
display_text
$6
weight
$5
token
$7
WEIGHTS
$5
flags
*2
+optional
+multiple
*10
$4
name
$9
aggregate
$4
type
$5
oneof
$5
token
$9
AGGREGATE
$5
flags
*1
+optional
$9
arguments
*3
*8
$4
name
$3
sum
$4
type
$10
pure-token
$12
display_text
$3
sum
$5
token
$3
SUM
*8
$4
name
$3
min
$4
type
$10
pure-token
$12
display_text
$3
min
$5
token
$3
MIN
*8
$4
name
$3
max
$4
type
$10
pure-token
$12
display_text
$3
max
$5
token
$3
MAX
*10
$4
name
$10
withscores
$4
type
$10
pure-token
$12
display_text
$10
withscores
$5
token
$10
WITHSCORES
$5
flags
*1
+optional
$5
setex
*16
$7
summary
$88
Sets the string value and expiration time of a key. Creates the key if it doesn't exist.
$5
since
$5
2.0.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$6
2.6.12
$11
replaced_by
$28
`SET` with the `EX` argument
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$7
seconds
$4
type
$7
integer
$12
display_text
$7
seconds
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$12
bgrewriteaof
*8
$7
summary
$53
Asynchronously rewrites the append-only file to disk.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$4
O(1)
$5
ltrim
*10
$7
summary
$86
Removes elements from both ends a list. Deletes the list if all elements were trimmed.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$70
O(N) where N is the number of elements to be removed by the operation.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
start
$4
type
$7
integer
$12
display_text
$5
start
*6
$4
name
$4
stop
$4
type
$7
integer
$12
display_text
$4
stop
$8
bzpopmin
*12
$7
summary
$183
Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
$5
since
$5
5.0.0
$5
group
$10
sorted-set
$10
complexity
$64
O(log(N)) with N being the number of elements in the sorted set.
$7
history
*1
*2
$5
6.0.0
$59
`timeout` is interpreted as a double instead of an integer.
$9
arguments
*2
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
*6
$4
name
$7
timeout
$4
type
$6
double
$12
display_text
$7
timeout
$5
debug
*10
$7
summary
$35
A container for debugging commands.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$22
Depends on subcommand.
$9
doc_flags
*1
+syscmd
$8
failover
*10
$7
summary
$67
Starts a coordinated failover from a server to one of its replicas.
$5
since
$5
6.2.0
$5
group
$6
server
$10
complexity
$4
O(1)
$9
arguments
*3
*10
$4
name
$6
target
$4
type
$5
block
$5
token
$2
TO
$5
flags
*1
+optional
$9
arguments
*3
*6
$4
name
$4
host
$4
type
$6
string
$12
display_text
$4
host
*6
$4
name
$4
port
$4
type
$7
integer
$12
display_text
$4
port
*10
$4
name
$5
force
$4
type
$10
pure-token
$12
display_text
$5
force
$5
token
$5
FORCE
$5
flags
*1
+optional
*10
$4
name
$5
abort
$4
type
$10
pure-token
$12
display_text
$5
abort
$5
token
$5
ABORT
$5
flags
*1
+optional
*10
$4
name
$12
milliseconds
$4
type
$7
integer
$12
display_text
$12
milliseconds
$5
token
$7
TIMEOUT
$5
flags
*1
+optional
$6
strlen
*10
$7
summary
$37
Returns the length of a string value.
$5
since
$5
2.2.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
touch
*10
$7
summary
$107
Returns the number of existing keys out of those specified after updating the time they were last accessed.
$5
since
$5
3.2.1
$5
group
$7
generic
$10
complexity
$56
O(N) where N is the number of keys that will be touched.
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$3
del
*10
$7
summary
$25
Deletes one or more keys.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$288
O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).
$9
arguments
*1
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$5
flags
*1
+multiple
$10
pfselftest
*10
$7
summary
$51
An internal command for testing HyperLogLog values.
$5
since
$5
2.8.9
$5
group
$11
hyperloglog
$10
complexity
$3
N/A
$9
doc_flags
*1
+syscmd
$7
discard
*8
$7
summary
$23
Discards a transaction.
$5
since
$5
2.0.0
$5
group
$12
transactions
$10
complexity
$45
O(N), when N is the number of queued commands
$11
bitfield_ro
*10
$7
summary
$68
Performs arbitrary read-only bitfield integer operations on strings.
$5
since
$5
6.0.0
$5
group
$6
bitmap
$10
complexity
$34
O(1) for each subcommand specified
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*10
$4
name
$9
get-block
$4
type
$5
block
$5
token
$3
GET
$5
flags
*3
+optional
+multiple
+multiple_token
$9
arguments
*2
*6
$4
name
$8
encoding
$4
type
$6
string
$12
display_text
$8
encoding
*6
$4
name
$6
offset
$4
type
$7
integer
$12
display_text
$6
offset
$4
save
*8
$7
summary
$44
Synchronously saves the database(s) to disk.
$5
since
$5
1.0.0
$5
group
$6
server
$10
complexity
$57
O(N) where N is the total number of keys in all databases
$5
hmset
*16
$7
summary
$35
Sets the values of multiple fields.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$47
O(N) where N is the number of fields being set.
$9
doc_flags
*1
+deprecated
$16
deprecated_since
$5
4.0.0
$11
replaced_by
$38
`HSET` with multiple field-value pairs
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$4
data
$4
type
$5
block
$5
flags
*1
+multiple
$9
arguments
*2
*6
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$5
lpush
*12
$7
summary
$77
Prepends one or more elements to a list. Creates the key if it doesn't exist.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$106
O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
$7
history
*1
*2
$5
2.4.0
$37
Accepts multiple `element` arguments.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$7
element
$4
type
$6
string
$12
display_text
$7
element
$5
flags
*1
+multiple
$6
append
*10
$7
summary
$76
Appends a string to the value of a key. Creates the key if it doesn't exist.
$5
since
$5
2.0.0
$5
group
$6
string
$10
complexity
$233
O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
value
$4
type
$6
string
$12
display_text
$5
value
$5
multi
*8
$7
summary
$21
Starts a transaction.
$5
since
$5
1.2.0
$5
group
$12
transactions
$10
complexity
$4
O(1)
$8
readonly
*8
$7
summary
$75
Enables read-only queries for a connection to a Redis Cluster replica node.
$5
since
$5
3.0.0
$5
group
$7
cluster
$10
complexity
$4
O(1)
$4
wait
*10
$7
summary
$110
Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed.
$5
since
$5
3.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*2
*6
$4
name
$11
numreplicas
$4
type
$7
integer
$12
display_text
$11
numreplicas
*6
$4
name
$7
timeout
$4
type
$7
integer
$12
display_text
$7
timeout
$10
zdiffstore
*10
$7
summary
$55
Stores the difference of multiple sorted sets in a key.
$5
since
$5
6.2.0
$5
group
$10
sorted-set
$10
complexity
$155
O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
$9
arguments
*3
*8
$4
name
$11
destination
$4
type
$3
key
$12
display_text
$11
destination
$14
key_spec_index
:0
*6
$4
name
$7
numkeys
$4
type
$7
integer
$12
display_text
$7
numkeys
*10
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:1
$5
flags
*1
+multiple
$5
hmget
*10
$7
summary
$43
Returns the values of all fields in a hash.
$5
since
$5
2.0.0
$5
group
$4
hash
$10
complexity
$53
O(N) where N is the number of fields being requested.
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*8
$4
name
$5
field
$4
type
$6
string
$12
display_text
$5
field
$5
flags
*1
+multiple
$6
lrange
*10
$7
summary
$40
Returns a range of elements from a list.
$5
since
$5
1.0.0
$5
group
$4
list
$10
complexity
$178
O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$5
start
$4
type
$7
integer
$12
display_text
$5
start
*6
$4
name
$4
stop
$4
type
$7
integer
$12
display_text
$4
stop
$11
pexpiretime
*10
$7
summary
$70
Returns the expiration time of a key as a Unix milliseconds timestamp.
$5
since
$5
7.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$9
arguments
*1
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
$6
decrby
*10
$7
summary
$102
Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.
$5
since
$5
1.0.0
$5
group
$6
string
$10
complexity
$4
O(1)
$9
arguments
*2
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$9
decrement
$4
type
$7
integer
$12
display_text
$9
decrement
$6
expire
*12
$7
summary
$45
Sets the expiration time of a key in seconds.
$5
since
$5
1.0.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.0.0
$41
Added options: `NX`, `XX`, `GT` and `LT`.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$7
seconds
$4
type
$7
integer
$12
display_text
$7
seconds
*10
$4
name
$9
condition
$4
type
$5
oneof
$5
since
$5
7.0.0
$5
flags
*1
+optional
$9
arguments
*4
*8
$4
name
$2
nx
$4
type
$10
pure-token
$12
display_text
$2
nx
$5
token
$2
NX
*8
$4
name
$2
xx
$4
type
$10
pure-token
$12
display_text
$2
xx
$5
token
$2
XX
*8
$4
name
$2
gt
$4
type
$10
pure-token
$12
display_text
$2
gt
$5
token
$2
GT
*8
$4
name
$2
lt
$4
type
$10
pure-token
$12
display_text
$2
lt
$5
token
$2
LT
$7
pexpire
*12
$7
summary
$50
Sets the expiration time of a key in milliseconds.
$5
since
$5
2.6.0
$5
group
$7
generic
$10
complexity
$4
O(1)
$7
history
*1
*2
$5
7.0.0
$41
Added options: `NX`, `XX`, `GT` and `LT`.
$9
arguments
*3
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$12
milliseconds
$4
type
$7
integer
$12
display_text
$12
milliseconds
*10
$4
name
$9
condition
$4
type
$5
oneof
$5
since
$5
7.0.0
$5
flags
*1
+optional
$9
arguments
*4
*8
$4
name
$2
nx
$4
type
$10
pure-token
$12
display_text
$2
nx
$5
token
$2
NX
*8
$4
name
$2
xx
$4
type
$10
pure-token
$12
display_text
$2
xx
$5
token
$2
XX
*8
$4
name
$2
gt
$4
type
$10
pure-token
$12
display_text
$2
gt
$5
token
$2
GT
*8
$4
name
$2
lt
$4
type
$10
pure-token
$12
display_text
$2
lt
$5
token
$2
LT
$7
restore
*12
$7
summary
$60
Creates a key from the serialized representation of a value.
$5
since
$5
2.6.0
$5
group
$7
generic
$10
complexity
$386
O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).
$7
history
*3
*2
$5
3.0.0
$29
Added the `REPLACE` modifier.
*2
$5
5.0.0
$28
Added the `ABSTTL` modifier.
*2
$5
5.0.0
$40
Added the `IDLETIME` and `FREQ` options.
$9
arguments
*7
*8
$4
name
$3
key
$4
type
$3
key
$12
display_text
$3
key
$14
key_spec_index
:0
*6
$4
name
$3
ttl
$4
type
$7
integer
$12
display_text
$3
ttl
*6
$4
name
$16
serialized-value
$4
type
$6
string
$12
display_text
$16
serialized-value
*12
$4
name
$7
replace
$4
type
$10
pure-token
$12
display_text
$7
replace
$5
token
$7
REPLACE
$5
since
$5
3.0.0
$5
flags
*1
+optional
*12
$4
name
$6
absttl
$4
type
$10
pure-token
$12
display_text
$6
absttl
$5
token
$6
ABSTTL
$5
since
$5
5.0.0
$5
flags
*1
+optional
*12
$4
name
$7
seconds
$4
type
$7
integer
$12
display_text
$7
seconds
$5
token
$8
IDLETIME
$5
since
$5
5.0.0
$5
flags
*1
+optional
*12
$4
name
$9
frequency
$4
type
$7
integer
$12
display_text
$9
frequency
$5
token
$4
FREQ
$5
since
$5
5.0.0
$5
flags
*1
+optional
$4
auth
*12
$7
summary
$29
Authenticates the connection.
$5
since
$5
1.0.0
$5
group
$10
connection
$10
complexity
$60
O(N) where N is the number of passwords defined for the user
$7
history
*1
*2
$5
6.0.0
$40
Added ACL style (username and password).
$9
arguments
*2
*10
$4
name
$8
username
$4
type
$6
string
$12
display_text
$8
username
$5
since
$5
6.0.0
$5
flags
*1
+optional
*6
$4
name
$8
password
$4
type
$6
string
$12
display_text
$8
password
