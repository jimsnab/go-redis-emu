package main

import (
	"context"
	"errors"
	"fmt"
	"os"
	"strings"
	"testing"

	"github.com/jimsnab/go-lane"
	"github.com/jimsnab/go-redisemu"
	"github.com/redis/go-redis/v9"
)

// Set useLocalRedis to true to direct redis traffic to a real redis server you have listening on localhost:6379
// N.B. when using the emulator, you can connect a redis cli to it, to view data of your running test.
// (A long sleep in your test may be helpful to allow you to connect the cli and view data.)

var useLocalRedis = false

// server emulation
var redisServer *redisemu.RedisEmu
var testClient *redis.Client

// redis client - supports connecting to a "real redis" or to the emulated server
// always redisClient in production code; can be redisClient or testClient in unit testing
var redisTestUrl string
var redisSingleton *redis.Client
var isRedisSingletonReal bool

const kRedisTestPort = 7379

// common test data (not related to redis)
var testLane lane.TestingLane

func TestMain(m *testing.M) {
	testSetup()
	code := m.Run()
	testShutdown()
	os.Exit(code)
}

func testSetup() {
	testLane = lane.NewTestingLane(context.Background())
	testLane.AddTee(lane.NewLogLane(context.Background()))

	serverLane := testLane.Derive()
	serverLane.SetLogLevel(lane.LogLevelInfo)

	var err error
	redisServer, err  = redisemu.NewEmulator(
		serverLane,
		kRedisTestPort,
		"", // using localhost
		"", // not saving redis to disk
		nil, // no external termination signal (such as keypress)
	)
	if err != nil {
		fmt.Println("Error starting redis emulator service: ", err)
	}
	redisServer.Start()

	fmt.Printf("redis emulator running at localhost:%d", kRedisTestPort)

	if useLocalRedis {
		// connect a client to a localhost redis
		redisTestUrl = "redis://localhost:6379"
	} else {
		// connect a client to the emulator
		redisTestUrl = fmt.Sprintf("redis://localhost:%d", kRedisTestPort)
	}
	opt, err := redis.ParseURL(redisTestUrl + "/1")
	if err != nil {
		fmt.Println("Error parsing redis emulator url: ", err)
		os.Exit(1)
	}

	testClient = redis.NewClient(opt)

	// start the production redis client
	err = initializeRedisClient(testLane, redisTestUrl+"/0")
	if err != nil {
		fmt.Println("Error connecting the production redis client: ", err)
		os.Exit(1)
	}
}

func testShutdown() {
	redisServer.RequestTermination()
	redisServer.WaitForTermination()
	redisServer = nil
}

func initializeRedisClient(l lane.Lane, redisUrl string) (err error) {
	opt, err := redis.ParseURL(redisUrl)
	if err != nil {
		l.Error("error parsing redis emulator url: ", err)
		err = errors.New("invalid redis url")
		return
	}

	redisSingleton = redis.NewClient(opt)
	isRedisSingletonReal = redisServer == nil || !strings.HasSuffix(opt.Addr, fmt.Sprintf("%d", kRedisTestPort))
	return
}

// clears redis testing emulator to be ready for new test data
func testInitializeRedisDb(t *testing.T) {
    // protect against accidental deletion
	if isRedisSingletonReal {
		panic("don't flush the real redis!")
	}

	_, err := redisSingleton.FlushDB(testLane).Result()
	if err != nil {
		fmt.Println("Failed to flush the test redis db: ", err)
		os.Exit(1)
	}
}
